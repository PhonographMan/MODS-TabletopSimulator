-- Created by LostGod on 5/8/2016
-- Heavily modified by Lost Savage
-- Also used code from smiling Aktheon, SwiftPanda, Rodney,
-- Markimus, Sionar, Morten G and Hmmmpf

-- Static Global Variables
mod_name = 'Secret Hitler: CE'
update_version = 101
add_on_version = 5

--Boards and Buttons
settingsPannel_guid = '39d283'
fasPannel_guid = 'c09dbd'
drawPileBoard_guid = 'a5b10f'
discardPileBoard_guid = '3e225f'
radio_string = '●'
check_string = '✓'

--Board cards
inspectOrange_deck_guid = '87e770'
topOneOrange_deck_guid = '6b94d6'
topThreeOrange_deck_guid = '021287'
nextPresidentOrange_deck_guid = '0cce08'
bulletRed_deck_guid = '747b8f'
vetoRed_deck_guid = 'd8f06c'
liberalNotUsed_deck_guid = '54ae94'
fascistNotUsed_deck_guid = '7cec50'
all_deck_guids = {
	'87ca7e', '6b94d6', 'c3149f',
	'4a8ebc', '021287', '7ccdc0',
	'74db80', '87e770', '3fb57a',
	'2dfce5', '0cce08', 'd22a6b',
	'b1c672', '8354ae', '747b8f',
	'34d88b', '9487d7', 'd8f06c',
	'54ae94', '7cec50'
}

--Decks/Cards
hitler_deck_guid = '5997ea'
fascist_deck_guids = {'5f2055','fb58cf', '4a3cf4'}
liberal_deck_guids = {'b156f7', 'd1735a', 'c8ab2a', 'b2873d', '313939', '40d8f5'}
policy_deck_guid = '386233'
extraRole_card_guids = {'675a6f', '16e480', '0a5960', '02b664', '328440', '05df40', '98f4dd', '7b4b46', 'ccb7ed', 'c2309a'}
fakeMembership_card_guid = '55d1c3'
fascistMembership_card_guid = 'e4d489'
liberalMembership_card_guid = 'a73564'

--Scripting Zones
draw_zone_guid = '6463d3'
discard_zone_guid = 'b9bd6e'
fascist_zone_guids = {'1f0149', '390247', '6c3840', '13e460', '441bbf', '6a906e', '488053'}
liberal_zone_guids = {'12b8ce', '3cabfa', '6f02b7', '939e6d', '3f80ba', 'a6b76f'}
topdeck_zone_guid = 'c0b577'
policySafety_zone_guids = {White = 'e99663', Brown = '13b335', Red = 'd7774a', Orange = 'f601b1', Yellow = '620e09', Green = 'b7c2d8', Teal = '162d55', Blue = '0aa61b', Purple = 'fdc17a', Pink = 'c4d8e8'}

--Expansion
abilitiesPile_zone_guid = 'eea120'
effectsPile_zone_guid = '374a16'

--Other
trusted_players = {'76561197992512677'}
boardColor_rgb = {14/255, 45/255, 18/255}
lastVote_guids = {'88c953', 'ba4919', 'b7dcde', '4598da'}
-- @{100, 100, 100+} hidden zones
-- @{-100, 100, -100} is used to delete/spawn objects

-- Global Variables (non-static)
customOnly = nil
bannerZoneGuid = nil
topdeck = false
lastDrawCt = nil
lastPlayerCt = nil
hold = false
votes = {}
disableVote = false
votePassed = false
blockDraw = false

-- Saved data
bannerGuids = {}
bulletInfo = {
	type = 'Custom_Model',
	mesh = 'http://cloud-3.steamusercontent.com/ugc/487893695357489958/2749FC201350D558AC9DF373861E4323C8B354BB/',
	diffuse = '',
	assetbundle = nil,
	assetbundle_secondary = nil,
	convex = true,
	image = nil,
	material = 2,
	specular_color = {1, 1, 0.5882353},
	specular_intensity = 1.7,
	specular_sharpness = 8.0,
	fresnel_strength = 0,
	use_grid = false,
	colorTint = {0, 0, 0.0382530019},
	scale = {0.75, 0.75, 0.75},
	action = 'Shoots',
	status = 'Dead'
}
fascists = {}
forcePres = nil
hitler = {}
inspected = {}
jaCardGuids = {}
lastFascistPlayed = 0
lastLiberalPlayed = 0
lastChan = nil
lastPres = nil
lastVote = ''
mainNotes = ''
neinCardGuids = {}
notate = {
	line = nil,
	action = ''
}
noteTakerNotes = {}
noteTakerCurrLine = 0
options = {
	autoNotate = true,
	dealPartyCards = false,
	dealRoleCards = false,
	expansionAmount = 2,
	expansionOptionEnabled = 0, -- [1 SwapGov, 2 Reverse, 4 SwapPower, 8 Unused ...]
	expansionOptionStatus = 0, -- [1 SwapGov, 2 Reverse, 4 Unused, 8 Unused ...]
	expansionOptionText = {'Pres > Chan', 'Chan > Pres', 'Clockwise', 'Reversed'},
	fascistCards = 11,
	gameType = 0, -- [0 Original, 1 Extended, 2 Custom]
	liberalCards = 6,
	noteType = 1, -- [1 Dark wood, 2 Light wood, 3 Red wood, 4 Black plastic, 5 Board image, 6 Swiss cheese, 7 Private only, 8 Cooperative]
	policySafety = true,
	scriptedVoting = true,
	shufflePlayers = false,
	shuffleHost = true,
	voteHistory = false,
	zoneType = 4 -- [1 None, 2 Small, 3 Gap (version 1), 4 Gap (version 2), 5 Large, 6 12 Player]
}
players = {}
playerRoleCardGuids = {}
playerStatusButtonGuids = {}
playerStatus = { --[1 Board, 2 Not Hitler, 3 Vote Only, 4 Silenced, 5 Dead, 6 Dead not Hitler]
	White = 1,
	Brown = 1,
	Red = 1,
	Orange = 1,
	Yellow = 1,
	Green = 1,
	Teal = 1,
	Blue = 1,
	Purple = 1,
	Pink = 1
}
roles = {}
started = nil
text = {
	hitler = 'Hitler',
	liberal = 'Liberal',
	liberalAbbr = 'Liberal',
	liberalArticle = 'a',
	liberalLetter = 'L',
	fascist = 'Fascist',
	fascistAbbr = 'Fascist',
	fascistArticle = 'a',
	fascistLetter = 'F',
	policy = 'policy'
}
voteNotes = ''
voteNotebook = ''

-- Called when a game finishes loading
function onLoad(saveString)
	if not (saveString == '') then
		local save = JSON.decode(saveString)
		bannerGuids = save['b']
		bulletInfo = save['bi']
		fascists = save['f']
		forcePres = save['fp']
		hitler = save['h']
		inspected = save['i']
		jaCardGuids = save['ja']
		lastFascistPlayed = save['lfp']
		lastLiberalPlayed = save['llp']
		lastChan = save['lc']
		lastPres = save['lp']
		lastVote = save['lv']
		mainNotes = save['mn']
		neinCardGuids = save['nein']
		notate = save['note']
		noteTakerNotes = save['ntn']
		noteTakerCurrLine = save['ntcl']
		options = save['o']
		players = save['p']
		playerRoleCardGuids = save['prcg']
		playerStatus = save['ps']
		playerStatusButtonGuids = save['psbg']
		roles = save['r']
		started = save['s']
		text = save['t']
		voteNotes = save['vn']
		voteNotebook = save['vnb']
	end
	alwaysInit()
	if not started then
		mainNotes = '[FFFF00]Secret Hitler: Consolidator Edition\n' ..
						'Version ' ..  update_version .. ' (' .. string.len(Global.getLuaScript()) .. ')\n' ..
						'\n[-]Based on the board game:\n\n[FF0000]Secret Hitler[-]\ndesigned by\n[0080F8]Max Temkin[-],\n[0080F8]Mike Boxleiter[-],\n[0080F8]Tommy Maranges[-]\nand Illustrated by\n[0080F8]Mackenzie Schubert.[-]\n\n' ..
						'Check the notebook for additional\ninformation and subscribe on the\nworkshop to make sure you have the\nlatest version.\n\n' ..
						'Only the president can draw cards.\n\nTo topdeck a card move the election tracker\nto the \34REVEAL & PASS TOP POLICY\34 circle.\n\n'
		setNotes(mainNotes)
		local status, err = pcall(init)
		if not status then
			printToAll('ERROR LOADING: ' .. err, {1,0,0})
		end
		settingsPannelMakeButtons()
		refreshBoardCards()
	end
	if not noteTakerCurrLine or noteTakerCurrLine == 0 then
		noteTakerNotes = {}
		noteTakerCurrLine = 0
		addNewLine()
	end
end

function onSave()
	local save = {}
	save['b'] = bannerGuids
	save['bi'] = bulletInfo
	save['f'] = fascists
	save['fp'] = forcePres
	save['h'] = hitler
	save['i'] = inspected
	save['ja'] = jaCardGuids
	save['lfp'] = lastFascistPlayed
	save['llp'] = lastLiberalPlayed
	save['lc'] = lastChan
	save['lp'] = lastPres
	save['lv'] = lastVote
	save['mn'] = mainNotes
	save['nein'] = neinCardGuids
	save['note'] = notate
	save['ntn'] = noteTakerNotes
	save['ntcl'] = noteTakerCurrLine
	save['o'] = options
	save['p'] = players
	save['prcg'] = playerRoleCardGuids
	save['ps'] = playerStatus
	save['psbg'] = playerStatusButtonGuids
	save['r'] = roles
	save['s'] = started
	save['t'] = text
	save['vn'] = voteNotes
	save['vnb'] = voteNotebook
	local saveString = JSON.encode(save)

	return saveString
end

function refreshUI()
	if started then
		local youHitler = ''
		local youFas = ''
		local youLib = ''
		local youNotPlaying = 'Grey'
		local hitWhite = ''
		local hitBrown = ''
		local hitRed = ''
		local hitOrange = ''
		local hitYellow = ''
		local hitGreen = ''
		local hitTeal = ''
		local hitBlue = ''
		local hitPurple = ''
		local hitPink = ''
		local fasWhite = ''
		local fasBrown = ''
		local fasRed = ''
		local fasOrange = ''
		local fasYellow = ''
		local fasGreen = ''
		local fasTeal = ''
		local fasBlue = ''
		local fasPurple = ''
		local fasPink = ''

		for _, playerColor in pairs(main_playable_colors) do
			UI.setAttribute('player' .. playerColor, 'visibility', playerColor)
			if roles[playerColor] == 'hitler' then
				UI.setAttribute('hit' .. playerColor, 'Text', playerColor .. ' is ' .. text.hitler .. '!')
				if youHitler == '' then
					youHitler = playerColor
				else
					youHitler = youHitler .. '|' .. playerColor
				end
			elseif roles[playerColor] == 'fascist' then
				UI.setAttribute('fas' .. playerColor, 'Text', playerColor .. ' is ' .. text.fascistArticle .. ' ' .. text.fascist .. '!')
				if youFas == '' then
					youFas = playerColor
				else
					youFas = youFas .. '|' .. playerColor
				end
			elseif roles[playerColor] == 'liberal' then
				if youLib == '' then
					youLib = playerColor
				else
					youLib = youLib .. '|' .. playerColor
				end
			else
				youNotPlaying = youNotPlaying .. '|' .. playerColor
			end
		end
		hitWhite = hitVisibility('White')
		hitBrown = hitVisibility('Brown')
		hitRed = hitVisibility('Red')
		hitOrange = hitVisibility('Orange')
		hitYellow = hitVisibility('Yellow')
		hitGreen = hitVisibility('Green')
		hitTeal = hitVisibility('Teal')
		hitBlue = hitVisibility('Blue')
		hitPurple = hitVisibility('Purple')
		hitPink = hitVisibility('Pink')
		fasWhite = fasVisibility('White')
		fasBrown = fasVisibility('Brown')
		fasRed = fasVisibility('Red')
		fasOrange = fasVisibility('Orange')
		fasYellow = fasVisibility('Yellow')
		fasGreen = fasVisibility('Green')
		fasTeal = fasVisibility('Teal')
		fasBlue = fasVisibility('Blue')
		fasPurple = fasVisibility('Purple')
		fasPink = fasVisibility('Pink')

		UI.setAttribute('youLib', 'Text', 'You are ' .. text.liberalArticle .. ' ' .. text.liberal .. '!')
		UI.setAttribute('youFas', 'Text', 'You are ' .. text.fascistArticle .. ' ' .. text.fascist .. '!')
		UI.setAttribute('youHitler', 'Text', 'You are ' .. text.hitler .. '!')
		UI.setAttribute('youLib', 'visibility', youLib)
		UI.setAttribute('youFas', 'visibility', youFas)
		UI.setAttribute('youHitler', 'visibility', youHitler)
		UI.setAttribute('youNotPlaying', 'visibility', youNotPlaying)
		UI.setAttribute('hitWhite', 'visibility', hitWhite)
		UI.setAttribute('hitBrown', 'visibility', hitBrown)
		UI.setAttribute('hitRed', 'visibility', hitRed)
		UI.setAttribute('hitOrange', 'visibility', hitOrange)
		UI.setAttribute('hitYellow', 'visibility', hitYellow)
		UI.setAttribute('hitGreen', 'visibility', hitGreen)
		UI.setAttribute('hitTeal', 'visibility', hitTeal)
		UI.setAttribute('hitBlue', 'visibility', hitBlue)
		UI.setAttribute('hitPurple', 'visibility', hitPurple)
		UI.setAttribute('hitPink', 'visibility', hitPink)
		UI.setAttribute('fasWhite', 'visibility', fasWhite)
		UI.setAttribute('fasBrown', 'visibility', fasBrown)
		UI.setAttribute('fasRed', 'visibility', fasRed)
		UI.setAttribute('fasOrange', 'visibility', fasOrange)
		UI.setAttribute('fasYellow', 'visibility', fasYellow)
		UI.setAttribute('fasGreen', 'visibility', fasGreen)
		UI.setAttribute('fasTeal', 'visibility', fasTeal)
		UI.setAttribute('fasBlue', 'visibility', fasBlue)
		UI.setAttribute('fasPurple', 'visibility', fasPurple)
		UI.setAttribute('fasPink', 'visibility', fasPink)
	end
end

function hitVisibility(colorIn)
	local visList = ''

	if inTable(hitler, colorIn) then
		visList = 'Black'
		for _, playerColor in pairs(fascists) do
			if playerColor ~= colorIn then
				visList = visList .. '|' .. playerColor
			end
		end
		if #players < 7 then
			for _, playerColor in pairs(hitler) do
				if playerColor ~= colorIn then
					visList = visList .. '|' .. playerColor
				end
			end
		end
	end

	return visList
end

function fasVisibility(colorIn)
	local visList = ''

	if inTable(fascists, colorIn) then
		visList = 'Black'
		for _, playerColor in pairs(fascists) do
			if playerColor ~= colorIn then
				visList = visList .. '|' .. playerColor
			end
		end
		if #players < 7 then
			for _, playerColor in pairs(hitler) do
				if playerColor ~= colorIn then
					visList = visList .. '|' .. playerColor
				end
			end
		end
	end

	return visList
end

function refreshHiddenZones()
	for _, player in pairs(main_playable_colors) do
		if options.zoneType == 1 then
			--Hide the hidden zone so we can still use it later
			tmpObj = getObjectFromGUID(hidden_zone_guids[player])
			tmpObj.setScale({0.01, 0.01, 0.01})
			local colorToNumber = {White = 1, Brown = 2, Red = 3, Orange = 4, Yellow = 5, Green = 6, Teal = 7, Blue = 8, Purple = 9, Pink = 10}
			tmpObj.setPosition({100, 100, 100 + colorToNumber[player] * 2})
		elseif options.zoneType == 2 then
			tmpObj = getObjectFromGUID(hidden_zone_guids[player])
			tmpObj.setScale({15.3268776, 5.1, 6.35014629})
			forceObjectToPlayer(tmpObj, player, {forward = 0, right = 0, up = 0, forceHeight = 3.51}, no_rotation)
		elseif options.zoneType == 3 then
			local pos = {White = {29.65, 3.51, -32.75}, Brown = {0, 3.51, -32.75}, Red = {-29.65, 3.51, -32.75}, Orange = {-50.2, 3.51, -19.25}, Yellow = {-50.2, 3.51, 19.25}, Green = {-29.65, 3.51, 32.75}, Teal = {0, 3.51, 32.75}, Blue = {29.65, 3.51, 32.75}, Purple = {50.2, 3.51, 19.25}, Pink = {50.2, 3.51, -19.25}}
			local scale = {White = {28.4, 5.1, 10.1}, Brown = {28.4, 5.1, 10.1}, Red = {28.4, 5.1, 10.1}, Orange = {9.55, 5.1, 37.25}, Yellow = {9.55, 5.1, 37.25}, Green = {28.4, 5.1, 10.1}, Teal = {28.4, 5.1, 10.1}, Blue = {28.4, 5.1, 10.1}, Purple = {9.55, 5.1, 37.25}, Pink = {9.55, 5.1, 37.25}}

			tmpObj = getObjectFromGUID(hidden_zone_guids[player])
			tmpObj.setPosition(pos[player])
			tmpObj.setScale(scale[player])
			tmpObj.setRotation(no_rotation)
		elseif options.zoneType == 4 then
			local pos = {White = {29.65, 3.51, -31.9}, Brown = {0, 3.51, -31.9}, Red = {-29.65, 3.51, -31.9}, Orange = {-50.2, 3.51, -19.25}, Yellow = {-50.2, 3.51, 19.25}, Green = {-29.65, 3.51, 31.9}, Teal = {0, 3.51, 31.9}, Blue = {29.65, 3.51, 31.9}, Purple = {50.2, 3.51, 19.25}, Pink = {50.2, 3.51, -19.25}}
			local scale = {White = {28.4, 5.1, 11.8}, Brown = {28.4, 5.1, 11.8}, Red = {28.4, 5.1, 11.8}, Orange = {9.55, 5.1, 37.25}, Yellow = {9.55, 5.1, 37.25}, Green = {28.4, 5.1, 11.8}, Teal = {28.4, 5.1, 11.8}, Blue = {28.4, 5.1, 11.8}, Purple = {9.55, 5.1, 37.25}, Pink = {9.55, 5.1, 37.25}}

			tmpObj = getObjectFromGUID(hidden_zone_guids[player])
			tmpObj.setPosition(pos[player])
			tmpObj.setScale(scale[player])
			tmpObj.setRotation(no_rotation)
		elseif options.zoneType == 5 then
			local pos = {White = {29.3, 3.51, -31.9}, Brown = {0, 3.51, -31.9}, Red = {-29.3, 3.51, -31.9}, Orange = {-49.4, 3.51, -19}, Yellow = {-49.4, 3.51, 19}, Green = {-29.3, 3.51, 31.9}, Teal = {0, 3.51, 31.9}, Blue = {29.3, 3.51, 31.9}, Purple = {49.4, 3.51, 19}, Pink = {49.4, 3.51, -19}}
			local scale = {White = {29.3, 5.1, 11.8}, Brown = {29.3, 5.1, 11.8}, Red = {29.3, 5.1, 11.8}, Orange = {10.8, 5.1, 38.0}, Yellow = {10.8, 5.1, 38.0}, Green = {29.3, 5.1, 11.8}, Teal = {29.3, 5.1, 11.8}, Blue = {29.3, 5.1, 11.8}, Purple = {10.8, 5.1, 38.0}, Pink = {10.8, 5.1, 38.0}}

			tmpObj = getObjectFromGUID(hidden_zone_guids[player])
			tmpObj.setPosition(pos[player])
			tmpObj.setScale(scale[player])
			tmpObj.setRotation(no_rotation)
		elseif options.zoneType == 6 then
			local pos = {White = {-29.3, 3.51, -49.4}, Brown = {-49.4, 3.51, -29.3}, Red = {-49.4, 3.51, 0}, Orange = {-49.4, 3.51, 29.3}, Yellow = {-29.3, 3.51, 49.4}, Green = {0, 3.51, 49.4}, Teal = {29.3, 3.51, 49.4}, Blue = {49.4, 3.51, 29.3}, Purple = {49.4, 3.51, 0}, Pink = {49.4, 3.51, -29.3}}
			local scale = {White = {28.4, 5.1, 10.8}, Brown = {10.8, 5.1, 28.4}, Red = {10.8, 5.1, 28.4}, Orange = {10.8, 5.1, 28.4}, Yellow = {28.4, 5.1, 10.8}, Green = {28.4, 5.1, 10.8}, Teal = {28.4, 5.1, 10.8}, Blue = {10.8, 5.1, 28.4}, Purple = {10.8, 5.1, 28.4}, Pink = {10.8, 5.1, 28.4}}

			tmpObj = getObjectFromGUID(hidden_zone_guids[player])
			tmpObj.setPosition(pos[player])
			tmpObj.setScale(scale[player])
			tmpObj.setRotation(no_rotation)

			local handPos = {White = {-29.3, 4.46, -51.66}, Brown = {-51.66, 4.46, -29.3}, Red = {-51.66, 4.46, 0}, Orange = {-51.66, 4.46, 29.3}, Yellow = {-29.3, 4.46, 51.66}, Green = {0, 4.46, 51.66}, Teal = {29.3, 4.46, 51.66}, Blue = {51.66, 4.46, 29.3}, Purple = {51.66, 4.46, 0}, Pink = {51.66, 4.46, -29.3}}
			local handRot = {White = {0, 0, 0}, Brown = {0, 90, 0}, Red = {0, 90, 0}, Orange = {0, 90, 0}, Yellow = {0, 180, 0}, Green = {0, 180, 0}, Teal = {0, 180, 0}, Blue = {0, 270, 0}, Purple = {0, 270, 0}, Pink = {0, 270, 0}}
			local handParams = {
				scale = {11.66, 5.4, 4.87}
			}

			handParams.position = handPos[player]
			handParams.rotation = handRot[player]
			Player[player].setHandTransform(handParams)

			tmpObj = getObjectFromGUID(policySafety_zone_guids[player])
			forceObjectToPlayer(tmpObj, player, {forward = 0, right = 0, up = 0, forceHeight = 3.51}, no_rotation)
		end
	end
	if options.zoneType == 6 then
		broadcastToAll('Not even close to finished... reload the table to go back.', {1,1,1})
		local params = {type = 'Custom_Model'}
		local board = {}
		board[1] = spawnObject(params)
		board[2] = spawnObject(params)
		custom = {
			mesh = 'http://cloud-3.steamusercontent.com/ugc/933812827275737908/4A39E65F99D7809D6055BED44C2B2AF420776850/',
			diffuse = 'http://cloud-3.steamusercontent.com/ugc/933812827275738471/DBC87C418A1CBD45F4EB56EB0F63B65E7F042F1F/',
			type = 4,
			material = 1,
			specular_color = {223/255, 207/255, 190/255},
			specular_intensity = 0.05,
			specular_sharpness = 6.3
		}
		for i = 1, 2 do
			board[i].setCustomObject(custom)
			board[i].setLock(true)
			board[i].setRotation({0, 270, 0})
			board[i].setScale({0.74, 1, 1})
			board[i].setLuaScript(
				'function onLoad()\r\n' ..
				'	self.interactable = false\r\n' ..
				'end\r\n')
		end
		board[1].setPosition({0, 0.1, -46.2})
		board[2].setPosition({0, 0.1, 46.2})
		params = {
			type = 'BlockRectangle',
			scale = {28.4, 0.25, 5.4},
			position = {29.3, 1.09, -49.4}
		}
		local block = {}
		block[1] = spawnObject(params)
		params.position = {0, 1.09, -49.4}
		block[2] = spawnObject(params)
		for i, color in ipairs(extra_playable_colors) do
			block[i].setColorTint(extra_playable_colors_rgb[color])
			block[i].setLock(true)
		end
	end
end

function resetDecks()
	if options.gameType ~= 2 and foundBoardCards() then
		deleteBoardCards()
	end
	for i = 1, #all_deck_guids do
		tmpObj = getObjectFromGUID(all_deck_guids[i])
		if tmpObj then
			tmpObj.reset()
			if #tmpObj.getObjects() > 5 then
				deleteExtraItems(tmpObj, 5)
			elseif #tmpObj.getObjects() < 5 then
				addMissingItems(tmpObj, 5)
			end
		else
			customOnly = true
		end
	end
	if customOnly then
		options.gameType = 2
		settingsPannelMakeButtons()
	end
end

function refreshBoardCards()
	local tmpObj
	local params = {}

	params.rotation = flip_y
	if options.gameType < 2 then
		resetDecks()
		if options.gameType == 0 then
			tmpObj = getObjectFromGUID(fascistNotUsed_deck_guid)
			if tmpObj then
				params.position = getPositionByGUID(fascist_zone_guids[1])
				tmpObj.takeObject(params)
			end
			tmpObj = getObjectFromGUID(liberalNotUsed_deck_guid)
			if tmpObj then
				params.position = getPositionByGUID(liberal_zone_guids[1])
				tmpObj.takeObject(params)
			end
		end
		if #getSeatedPlayers() > 8 then
			if options.gameType == 1 then
				tmpObj = getObjectFromGUID(topOneOrange_deck_guid)
				if tmpObj then
					params.position = getPositionByGUID(fascist_zone_guids[1])
					tmpObj.takeObject(params)
				end
			end
			tmpObj = getObjectFromGUID(inspectOrange_deck_guid)
			if tmpObj then
				params.position = getPositionByGUID(fascist_zone_guids[2])
				tmpObj.takeObject(params)
				params.position = getPositionByGUID(fascist_zone_guids[3])
				tmpObj.takeObject(params)
			end
			tmpObj = getObjectFromGUID(nextPresidentOrange_deck_guid)
			if tmpObj then
				params.position = getPositionByGUID(fascist_zone_guids[4])
				tmpObj.takeObject(params)
			end
		elseif #getSeatedPlayers() > 6 then
			if options.gameType == 1 then
				tmpObj = getObjectFromGUID(topOneOrange_deck_guid)
				if tmpObj then
					params.position = getPositionByGUID(fascist_zone_guids[2])
					tmpObj.takeObject(params)
				end
			end
			tmpObj = getObjectFromGUID(inspectOrange_deck_guid)
			if tmpObj then
				params.position = getPositionByGUID(fascist_zone_guids[3])
				tmpObj.takeObject(params)
			end
			tmpObj = getObjectFromGUID(nextPresidentOrange_deck_guid)
			if tmpObj then
				params.position = getPositionByGUID(fascist_zone_guids[4])
				tmpObj.takeObject(params)
			end
		else
			if options.gameType == 1 then
				tmpObj = getObjectFromGUID(topOneOrange_deck_guid)
				if tmpObj then
					params.position = getPositionByGUID(fascist_zone_guids[3])
					tmpObj.takeObject(params)
				end
			end
			tmpObj = getObjectFromGUID(topThreeOrange_deck_guid)
			if tmpObj then
				params.position = getPositionByGUID(fascist_zone_guids[4])
				tmpObj.takeObject(params)
			end
		end
		tmpObj = getObjectFromGUID(bulletRed_deck_guid)
		if tmpObj then
			params.position = getPositionByGUID(fascist_zone_guids[5])
			tmpObj.takeObject(params)
		end
		tmpObj = getObjectFromGUID(bulletRed_deck_guid)
		if tmpObj then
			params.position = getPositionByGUID(fascist_zone_guids[6])
			tmpObj.takeObject(params)
		end
		tmpObj = getObjectFromGUID(vetoRed_deck_guid)
		if tmpObj then
			local pos = getPositionByGUID(fascist_zone_guids[6])
			params.position = {pos['x'], pos['y'], pos['z'] - 2}
			tmpObj.takeObject(params)
		end
	end

	lastPlayerCt = #getSeatedPlayers()
end

function onObjectEnterScriptingZone(zone, enterObject)
	if enterObject then
		if zone.guid == topdeck_zone_guid and enterObject.guid == election_tracker_guid then
			editButtonByLabel(drawPileBoard_guid, 'Draw 3', 'Topdeck', 'topdeckCard')
		end
	end
end

function onObjectLeaveScriptingZone(zone, leaveObject)
	if leaveObject then
		if zone.guid == topdeck_zone_guid and leaveObject.guid == election_tracker_guid then
			editButtonByLabel(drawPileBoard_guid, 'Topdeck', 'Draw 3', 'drawThree')
		elseif options.policySafety then
			if inTable(policySafety_zone_guids, zone.guid) and leaveObject.tag == 'Card' and
				(leaveObject.getDescription() == 'Fascist Policy' or
				 leaveObject.getDescription() == 'Liberal Policy') then
				if isFaceUp(leaveObject) and leaveObject.held_by_color then
					leaveObject.deal(1, leaveObject.held_by_color)
					broadcastToColor('Keep your policy cards face down\nwhen removing them from your hand!', leaveObject.held_by_color, {1, 0, 0})
				end
			end
		end
	end
end

function alwaysInit()
	local tmpObj

	-- Initialize the pseudo random number generator
	math.randomseed(os.time())

	refreshUI()
	refreshStatusButtons()
	refreshExpansionButtons()

	local drawPileBoard = getObjectFromGUID(drawPileBoard_guid)
	if drawPileBoard then
		local button = {
			click_function = 'drawThree',
			label = 'Draw 3',
			function_owner = Global,
			position = {0, 0.14, 3.7},
			rotation = {0, 0, 0},
			width = 2700,
			height = 1300,
			font_size = 650
		}
		drawPileBoard.createButton(button)
	end

	for _, cardGUID in ipairs(extraRole_card_guids) do
		local card = getObjectFromGUID(cardGUID)
		if card then card.interactable = false	end
	end
	tmpObj = getObjectFromGUID(fakeMembership_card_guid)
	if tmpObj then	tmpObj.interactable = false end
	tmpObj = getObjectFromGUID(fascistMembership_card_guid)
	if tmpObj then	tmpObj.interactable = false end
	tmpObj = getObjectFromGUID(liberalMembership_card_guid)
	if tmpObj then	tmpObj.interactable = false end
end

function refreshStatusButtons()
	local tmpObj
	local buttonGUID

	for _, buttonGUID in ipairs(playerStatusButtonGuids) do
		tmpObj = getObjectFromGUID(buttonGUID)
		if tmpObj then
			tmpObj.clearButtons()
			local ownerColor = closestPlayer(tmpObj, players, 18)
			local button = {
				function_owner = self,
				position = {0, 0.2, 0},
				rotation = {0, 180, 0},
				width = 2900,
				height = 1500,
				font_size = 600,
				click_function = 'changePlayerStatus'
			}
			if _G.playerStatus[ownerColor] == 1 then
				button.color = boardColor_rgb
				button.label = ''
			elseif _G.playerStatus[ownerColor] == 2 then
				button.color = stringColorToRGB('Green')
				button.label = 'Not ' .. text.hitler
			elseif _G.playerStatus[ownerColor] == 3 then
				button.color = stringColorToRGB('Yellow')
				button.label = 'Vote Only'
			elseif _G.playerStatus[ownerColor] == 4 then
				button.color = stringColorToRGB('Blue')
				button.label = 'Silenced'
			elseif _G.playerStatus[ownerColor] == 5 then
				button.color = stringColorToRGB('Red')
				button.label = bulletInfo.status
			else
				button.color = stringColorToRGB('Red')
				button.label = bulletInfo.status .. '\nNot ' .. text.hitler
			end
			tmpObj.createButton(button)
		end
	end
end

function refreshExpansionButtons()
	local fasBoard = getObjectFromGUID(fasPannel_guid)
	if fasBoard then
		fasBoard.clearButtons()
		local button = {
			click_function = 'expansionOptionStatusSwapGov',
			function_owner = self,
			position = {12, 0.2, 6},
			rotation = {0, 0, 0},
			width = 2600,
			height = 800,
			font_size = 360
		}
		if bit32.band(options.expansionOptionStatus, 1) == 1 then
			button.font_color = {0, 0, 0}
			button.color =  stringColorToRGB('Orange')
			button.label = options.expansionOptionText[2]
		else
			button.font_color = stringColorToRGB('White')
			button.color =  boardColor_rgb
			button.label = options.expansionOptionText[1]
		end
		if bit32.band(options.expansionOptionEnabled, 1) == 1 then
			fasBoard.createButton(button)
		end

		button.click_function = 'expansionOptionStatusReverse'
		button.position = {-12, 0.2, 6}
		if bit32.band(options.expansionOptionStatus, 2) == 2 then
			button.font_color = {0, 0, 0}
			button.color =  stringColorToRGB('Orange')
			button.label = options.expansionOptionText[4]
		else
			button.font_color = stringColorToRGB('White')
			button.color =  boardColor_rgb
			button.label = options.expansionOptionText[3]
		end
		if bit32.band(options.expansionOptionEnabled, 2) == 2 then
			fasBoard.createButton(button)
		end
	end
end

function init()
	local tmpObj

	tmpObj = getObjectFromGUID(hitler_deck_guid)
	if tmpObj == nil then error('Hitler Deck') end
	tmpObj.interactable = false
	tmpObj.setLock(true)

	for i = 1, #fascist_deck_guids do
		tmpObj = getObjectFromGUID(fascist_deck_guids[i])
		if tmpObj == nil then error('Fascist Deck ' .. fascist_deck_guids[i]) end
		tmpObj.interactable = false
		tmpObj.setLock(true)
	end

	for i = 1, #liberal_deck_guids do
		tmpObj = getObjectFromGUID(liberal_deck_guids[i])
		if tmpObj == nil then error('Liberal Deck ' .. liberal_deck_guids[i]) end
		tmpObj.interactable = false
		tmpObj.setLock(true)
	end

	tmpObj = getObjectFromGUID(policy_deck_guid)
	if tmpObj == nil then error('Policy Deck') end
	tmpObj.interactable = false

	tmpObj = getObjectFromGUID(president_guid)
	if tmpObj == nil then error('President') end
	tmpObj.interactable = false
	tmpObj.setLock(true)
	tmpObj = getObjectFromGUID(chancelor_guid)
	if tmpObj == nil then error('Chancellor') end
	tmpObj.interactable = false
	tmpObj.setLock(true)
	tmpObj = getObjectFromGUID(prev_president_guid)
	if tmpObj == nil then error('Prev President') end
	tmpObj.setLock(true)
	tmpObj = getObjectFromGUID(prev_chancelor_guid)
	if tmpObj == nil then error('Prev Chancellor') end
	tmpObj.setLock(true)

	tmpObj = getObjectFromGUID(election_tracker_guid)
	if tmpObj == nil then error('Election Tracker') end
	tmpObj.setLock(true)

	for i, player in ipairs(main_playable_colors) do
		tmpObj = getObjectFromGUID(hidden_zone_guids[player])
		if tmpObj == nil then error(player .. ' Hidden Zone') end
	end

	--Expansion
	tmpObj = getDeckFromZoneByGUID(abilitiesPile_zone_guid)
	if tmpObj then	tmpObj.interactable = false end
	tmpObj = getDeckFromZoneByGUID(effectsPile_zone_guid)
	if tmpObj then	tmpObj.interactable = false end

	resetDecks()
end

function onChat(messageIn, player)
	local message = string.lower(string.gsub(messageIn, '%s+', ' '))
	local messageTable = string.tokenize(message, ' ')

	if messageTable[1] == 'r' then
		if started then
			player:print(tellRole(player.color))
		else
			player:print('[FF0000]ERROR: Game not started.[-]')
		end
		return false
	elseif messageTable[1] == 'l' then
		player:print(lastVote)
		return false
	elseif messageTable[1] == 'h' then
		if options.voteHistory then
			local msg = voteNotebook
			if messageTable[2] and tonumber(messageTable[2]) then
				msg = topLines(msg, tonumber(messageTable[2]))
			end
			player:print(string.gsub(msg, '\n$', ''))

		else
			player:print('[FF0000]ERROR: Full vote history is not enabled.[-]')
		end
		return false
	elseif messageTable[1] == 'n' then
		local msg = noteTakerNotesString(100, false, true)
		if messageTable[2] and tonumber(messageTable[2]) then
			msg = topLines(msg, tonumber(messageTable[2]))
		end
		player:print(string.gsub(msg, '\n$', ''))
		return false
	elseif messageTable[1] == 'o' then
		player:print(string.gsub(tableToString(options), '\n$', ''))
		return false
	elseif messageTable[1] == 'v' then
		player:print(versionInfo())
		return false
	elseif messageTable[1] == 'black' and (player.admin or inTable(trusted_players, player.steam_id)) then
		if messageTable[2] then
			local playerFound = getPlayerByName(messageTable[2])
			if playerFound then
				playerFound:changeColor('Black')
			else
				for _, p in pairs(Player.getPlayers()) do
					if p.steam_id == messageTable[2] then
						p:changeColor('Black')
					end
				end
			end
		else
			player:changeColor('Black')
		end
		return false
	elseif messageTable[1] == 'grey' and (player.admin or inTable(trusted_players, player.steam_id)) then
		if messageTable[2] then
			local playerFound = getPlayerByName(messageTable[2])
			if playerFound then
				playerFound:changeColor('Grey')
			else
				for _, p in pairs(Player.getPlayers()) do
					if p.steam_id == messageTable[2] then
						p:changeColor('Grey')
					end
				end
			end
		else
			player:changeColor('Grey')
		end
		return false
	elseif messageTable[1] == 'promote' and (player.admin or inTable(trusted_players, player.steam_id)) then
		if messageTable[2] then
			local playerFound = getPlayerByName(messageTable[2])
			if playerFound then
				playerFound.promote()
			else
				for _, p in pairs(Player.getPlayers()) do
					if p.steam_id == messageTable[2] then
						p.promote()
					end
				end
			end
		else
			player.promote()
		end
		return false
	elseif messageTable[1] == 'kick' and (player.admin or inTable(trusted_players, player.steam_id)) then
		if messageTable[2] then
			local playerFound = getPlayerByName(messageTable[2])
			if playerFound then
				playerFound.kick()
			else
				for _, p in pairs(Player.getPlayers()) do
					if p.steam_id == messageTable[2] then
						p.kick()
					end
				end
			end
		end
		return false
	elseif messageTable[1] == 'list' and (player.admin or inTable(trusted_players, player.steam_id)) then
		for _, p in pairs(Player.getPlayers()) do
			player:print(p.steam_name .. ' ' .. p.steam_id)
		end
		return false
	elseif messageTable[1] == 'help' then
		player:print(chatHelp(player))
		return false
	end
end

function getPlayerByName(playerName)
   local thePlayers = Player.getPlayers()
   local amountOfPlayersFound = 0
   local playerToReturn = nil

   for index, name in pairs(thePlayers) do
   	if string.match(string.lower(thePlayers[index].steam_name), string.lower(playerName)) then
         playerToReturn = thePlayers[index]
			amountOfPlayersFound = amountOfPlayersFound + 1
		end
	end

   if amountOfPlayersFound == 1 then
		return playerToReturn
	end

	return nil
end

function string:tokenize(sep)
    local sep, fields = sep or ':', {}
    local pattern = string.format('([^%s]+)', sep)
    self:gsub(pattern, function(c) fields[#fields+1] = c end)
    return fields
end

function topLines(stringIn, maxLinesIn)
	local linesFound = 0
	local newLinePos = string.find(stringIn, '\n')
	local oldLinePos = nil

	while newLinePos do
		linesFound = linesFound + 1
		oldLinePos = newLinePos
		if maxLinesIn == linesFound then break end
		newLinePos = string.find(stringIn, '\n', newLinePos + 1)
	end

	if not newLinePos then
		oldLinePos = string.len(stringIn)
	end

	return string.sub(stringIn, 1, oldLinePos)
end

function chatHelp(player)
	local msg = 'chat commands:\n' ..
					'   r - All the role information you can know\n' ..
					'   l - Shows the last vote\n' ..
					'   h [lines] - Vote history\n' ..
					'   n [lines] - All of the notes\n' ..
					'   o - current options\n' ..
					'   v - Version info\n' ..
					'   help - This message'
	if player.admin then
		msg = msg .. '\nadmin chat commands:\n' ..
					'   black [name* or steam id] - sets player to black\n' ..
					'   grey [name* or steam id] - sets player to grey\n' ..
					'   promote [name* or steam id] - promotes/demotes player\n' ..
					'   kick name* or steam id - kicks the player\n' ..
					'   list - lists steam ids\n' ..
					'   * partial name allowed but must be distinct'
	end

	return msg
end

-- This allows outside objects to call any function from this code.
--  Global.call('callFunction', { fcn = 'drawCards', params = {amountToDraw, color} })
function callFunction(packet)
    assert(type(_G[packet.fcn]) == 'function', 'No function named ' .. packet.fcn .. ' exists!')
    return table.pack(_G[packet.fcn](unpack(packet.params or {})))
end

function settingsPannelMakeButtons()
	local settingsPannel = getObjectFromGUID(settingsPannel_guid)
	if settingsPannel then
		settingsPannel.clearButtons()

		local buttonParam = {
			font_color = {0, 0, 0},
			rotation = {0, 0, 0},
			width = 0,
			height = 0,
			font_size = 480,
			function_owner = self,
			click_function = 'nullFunction'
		}
		local startX = -6.1
		local offsetZ = 1.32

		local startZ = -22.9
		buttonParam.label = '[u]Game Type[/u]'
		buttonParam.position = {0, 0.2, startZ - 1.4}
		settingsPannel.createButton(buttonParam)
		makeSquareButtonLabel(settingsPannel, options.gameType == 0, radio_string, '', 'Original', 'gameTypeZero', {startX, 0.2, startZ}, 2.45, not customOnly)
		makeSquareButtonLabel(settingsPannel, options.gameType == 1, radio_string, '', 'Extended', 'gameTypeOne', {startX, 0.2, startZ + offsetZ}, 2.7, not customOnly)
		makeSquareButtonLabel(settingsPannel, options.gameType == 2, radio_string, '', 'Custom', 'gameTypeTwo', {startX, 0.2, startZ + offsetZ * 2}, 2.3, true)
		makeDecIncButtonsLabel(settingsPannel, options.liberalCards, '-', '+', 'Liberal Cards', 'decLiberalCards', 'incLiberalCards', {startX + 1.3, 0.2, startZ + offsetZ * 3}, 6.1, false, options.gameType == 2)
		makeDecIncButtonsLabel(settingsPannel, options.fascistCards, '-', '+', 'Fascist Cards', 'decFascistCards', 'incFascistCards', {startX + 1.3, 0.2, startZ + offsetZ * 4}, 6.1, false, options.gameType == 2)

		startZ = -14.7
		buttonParam.label = '[u]Note Taker[/u]'
		buttonParam.position = {0, 0.2, startZ - 1.4}
		settingsPannel.createButton(buttonParam)
		local labels = {'Dark wood', 'Light wood (tintable)', 'Red wood (tintable)', 'Black plastic', 'Board image', 'Swiss cheese', 'Private only', 'Cooperative'}
		local offsets = {4.4, 6.6, 6.3, 4.7, 4.7, 4.7, 4.6, 4.6}
		makeDecIncButtonsLabel(settingsPannel, options.noteType, '-', '+', labels, 'decNoteType', 'incNoteType', {startX, 0.2, startZ}, offsets, false, true)

		startZ = -11.6
		buttonParam.label = '[u]Hidden Zones[/u]'
		buttonParam.position = {0, 0.2, startZ - 1.4}
		settingsPannel.createButton(buttonParam)
		labels = {'None', 'Small', 'Gap (version 1)', 'Gap (version 2)', 'Large', '12 Player'}
		offsets = {3.2, 3.3, 5.3, 5.35, 3.3, 4.1}
		makeDecIncButtonsLabel(settingsPannel, options.zoneType, '-', '+', labels, 'decZoneType', 'incZoneType', {startX, 0.2, startZ}, offsets, false, options.zoneType ~= 6)

		startZ = -8.5
		buttonParam.label = '[u]Other Options[/u]'
		buttonParam.position = {0, 0.2, startZ - 1.4}
		settingsPannel.createButton(buttonParam)
		makeSquareButtonLabel(settingsPannel, options.dealRoleCards, check_string, '', 'Deal role', 'roleCardFlip', {startX, 0.2, startZ}, 2.7, true)
		makeSquareButtonLabel(settingsPannel, options.dealPartyCards, check_string, '', 'Deal party membership', 'partyCardFlip', {startX, 0.2, startZ + offsetZ}, 5.8, true)
		makeSquareButtonLabel(settingsPannel, options.scriptedVoting, check_string, '', 'Scripted voting', 'scriptedVotingFlip', {startX, 0.2, startZ + offsetZ * 2}, 4, true)
		makeSquareButtonLabel(settingsPannel, options.autoNotate, check_string, '', 'Auto notate', 'autoNotateFlip', {startX, 0.2, startZ + offsetZ * 3}, 3.4, true)
		makeSquareButtonLabel(settingsPannel, options.policySafety, check_string, '', 'Policy safety', 'policySafetyFlip', {startX, 0.2, startZ + offsetZ * 4}, 3.5, true)
		makeSquareButtonLabel(settingsPannel, options.voteHistory, check_string, '', 'Vote history', 'voteHistoryFlip', {startX, 0.2, startZ + offsetZ * 5}, 3.4, true)
		makeSquareButtonLabel(settingsPannel, options.shufflePlayers, check_string, '', 'Shuffle players', 'shufflePlayersFlip', {startX, 0.2, startZ + offsetZ * 6}, 4, true)
		makeSquareButtonLabel(settingsPannel, options.shuffleHost, check_string, '', 'Shuffle host', 'shuffleHostFlip', {startX + 1.3, 0.2, startZ + offsetZ * 7}, 3.3, options.shufflePlayers)

		--Expansion
		local abilitiesDeck = getDeckFromZoneByGUID(abilitiesPile_zone_guid)
		if abilitiesDeck then
			startZ = 3.7
			buttonParam.label = '[u]Expansion[/u]'
			buttonParam.position = {0, 0.2, startZ - 1.4}
			settingsPannel.createButton(buttonParam)
			makeDecIncButtonsLabel(settingsPannel, options.expansionAmount, '-', '+', 'Cards', 'decExpansionAmount', 'incExpansionAmount', {startX, 0.2, startZ}, 4.7, false, true)
			makeSquareButtonLabel(settingsPannel, bit32.band(options.expansionOptionEnabled, 1) == 1, check_string, '', 'Swap Government', 'expansionOptionEnabledSwapGov', {startX, 0.2, startZ + offsetZ}, 4.7, true)
			makeSquareButtonLabel(settingsPannel, bit32.band(options.expansionOptionEnabled, 4) == 4, check_string, '', 'Swap Power', 'expansionOptionEnabledSwapPower', {startX + 1.3, 0.2, startZ + offsetZ * 2}, 3.3, bit32.band(options.expansionOptionEnabled, 1) == 1)
			makeSquareButtonLabel(settingsPannel, bit32.band(options.expansionOptionEnabled, 2) == 2, check_string, '', 'Reverse', 'expansionOptionEnabledReverse', {startX, 0.2, startZ + offsetZ * 3}, 2.4, true)
		end

		buttonParam = {
			click_function = 'setupStart',
			label = 'Start',
			function_owner = self,
			position = {0, 0.2, 23.5},
			rotation = {0, 0, 0},
			width = 3300,
			height = 1700,
			font_size = 750
		}
		settingsPannel.createButton(buttonParam)
	else
		printToAll('ERROR: Settings pannel not found.', {1,0,0})
	end
end

function makeSquareButtonLabel(objectIn, valueIn, trueButtonTextIn, falseButtonTextIn, labelTextIn, clickFunctionIn, buttonPositionIn, textOffsetIn, enabledIn)
	local buttonParam = {
		rotation = {0, 0, 0},
		width = 600,
		height = 600,
		font_size = 480,
		function_owner = self,
		click_function = clickFunctionIn,
		position = buttonPositionIn
	}
	local textParam = {
		label = labelTextIn,
		font_color = {0, 0, 0},
		rotation = {0, 0, 0},
		width = 0,
		height = 0,
		font_size = 480,
		function_owner = self,
		click_function = 'nullFunction',
		position = {buttonPositionIn[1] + textOffsetIn, buttonPositionIn[2], buttonPositionIn[3]}
	}
	if valueIn then
		buttonParam.label = trueButtonTextIn
	else
		buttonParam.label = falseButtonTextIn
	end
	if not enabledIn then
		buttonParam.click_function = 'nullFunction'
		buttonParam.color = stringColorToRGB('Grey')
		buttonParam.font_color = {0.3, 0.3, 0.3}
		textParam.font_color = {0.3, 0.3, 0.3}
	end
	objectIn.createButton(buttonParam)
	objectIn.createButton(textParam)
end

function makeDecIncButtonsLabel(objectIn, valueIn, decButtonTextIn, incButtonTextIn, labelTextIn, decFunctionIn, incFunctionIn, positionIn, textOffsetIn, showValueIn, enabledIn)
	local buttonParam = {
		font_color = {0, 0, 0},
		rotation = {0, 0, 0},
		width = 0,
		height = 0,
		font_size = 480,
		function_owner = self,
		click_function = 'nullFunction'
	}

	local valueOffset
	if type(labelTextIn) == 'table' then
		valueOffset = 0
		buttonParam.label = labelTextIn[valueIn]
		buttonParam.position = {positionIn[1] + textOffsetIn[valueIn], positionIn[2], positionIn[3]}
	else
		valueOffset = 1.3
		buttonParam.label = labelTextIn
		buttonParam.position = {positionIn[1] + textOffsetIn, positionIn[2], positionIn[3]}
	end
	if not enabledIn then
		buttonParam.font_color = {0.3, 0.3, 0.3}
	end
	objectIn.createButton(buttonParam)

	if not enabledIn then
		buttonParam.color = stringColorToRGB('Grey')
	end
	buttonParam.label = decButtonTextIn
	buttonParam.position = positionIn
	buttonParam.width = 600
	buttonParam.height = 600
	if enabledIn then
		buttonParam.click_function = decFunctionIn
	end
	objectIn.createButton(buttonParam)

	buttonParam.label = incButtonTextIn
	buttonParam.position = {positionIn[1] + 1.3 + valueOffset, positionIn[2], positionIn[3]}
	if enabledIn then
		buttonParam.click_function = incFunctionIn
	end
	objectIn.createButton(buttonParam)

	if valueOffset > 0 then
		buttonParam.label = valueIn
		if enabledIn then
			buttonParam.click_function = incFunctionIn
		end
		buttonParam.position = {positionIn[1] + valueOffset, positionIn[2], positionIn[3]}
		objectIn.createButton(buttonParam)
	end
end

function gameTypeZero(clickedObject, playerColor)
	if Player[playerColor].admin then
		options.gameType = 0
		options.fascistCards = 11
		options.liberalCards = 6
		refreshBoardCards()
		settingsPannelMakeButtons()
	end
end

function gameTypeOne(clickedObject, playerColor)
	if Player[playerColor].admin then
		options.gameType = 1
		options.fascistCards = 13
		options.liberalCards = 7
		refreshBoardCards()
		settingsPannelMakeButtons()
	end
end

function gameTypeTwo(clickedObject, playerColor)
	if Player[playerColor].admin then
		options.gameType = 2
		refreshBoardCards()
		settingsPannelMakeButtons()
	end
end

function decNoteType(clickedObject, playerColor)
	if Player[playerColor].admin then
		if options.noteType > 1 then
			options.noteType = options.noteType - 1
		end
		settingsPannelMakeButtons()
	end
end

function incNoteType(clickedObject, playerColor)
	if Player[playerColor].admin then
		if options.noteType < 8 then
			options.noteType = options.noteType + 1
		end
		settingsPannelMakeButtons()
	end
end

function decZoneType(clickedObject, playerColor)
	if Player[playerColor].admin then
		if options.zoneType > 1 then
			options.zoneType = options.zoneType - 1
		end
		refreshHiddenZones()
		settingsPannelMakeButtons()
	end
end

function incZoneType(clickedObject, playerColor)
	if Player[playerColor].admin then
		if options.zoneType < 6 then
			options.zoneType = options.zoneType + 1
		end
		refreshHiddenZones()
		settingsPannelMakeButtons()
	end
end

function roleCardFlip(clickedObject, playerColor)
	if Player[playerColor].admin then
		options.dealRoleCards = not options.dealRoleCards
		settingsPannelMakeButtons()
	end
end

function partyCardFlip(clickedObject, playerColor)
	if Player[playerColor].admin then
		options.dealPartyCards = not options.dealPartyCards
		settingsPannelMakeButtons()
	end
end

function scriptedVotingFlip(clickedObject, playerColor)
	if Player[playerColor].admin then
		options.scriptedVoting = not options.scriptedVoting
		settingsPannelMakeButtons()
	end
end

function autoNotateFlip(clickedObject, playerColor)
	if Player[playerColor].admin then
		options.autoNotate = not options.autoNotate
		settingsPannelMakeButtons()
	end
end

function policySafetyFlip(clickedObject, playerColor)
	if Player[playerColor].admin then
		options.policySafety = not options.policySafety
		settingsPannelMakeButtons()
	end
end

function voteHistoryFlip(clickedObject, playerColor)
	if Player[playerColor].admin then
		options.voteHistory = not options.voteHistory
		settingsPannelMakeButtons()
	end
end

function shufflePlayersFlip(clickedObject, playerColor)
	if Player[playerColor].admin then
		options.shufflePlayers = not options.shufflePlayers
		settingsPannelMakeButtons()
	end
end

function shuffleHostFlip(clickedObject, playerColor)
	if Player[playerColor].admin then
		options.shuffleHost = not options.shuffleHost
		settingsPannelMakeButtons()
	end
end

function expansionOptionEnabledSwapGov(clickedObject, playerColor)
	if Player[playerColor].admin then
		if bit32.band(options.expansionOptionEnabled, 1) == 1 then
			options.expansionOptionEnabled = options.expansionOptionEnabled - 1
		else
			options.expansionOptionEnabled = options.expansionOptionEnabled + 1
		end
		refreshExpansionButtons()
		settingsPannelMakeButtons()
	end
end

function expansionOptionEnabledReverse(clickedObject, playerColor)
	if Player[playerColor].admin then
		if bit32.band(options.expansionOptionEnabled, 2) == 2 then
			options.expansionOptionEnabled = options.expansionOptionEnabled - 2
		else
			options.expansionOptionEnabled = options.expansionOptionEnabled + 2
		end
		refreshExpansionButtons()
		settingsPannelMakeButtons()
	end
end

function expansionOptionEnabledSwapPower(clickedObject, playerColor)
	if Player[playerColor].admin then
		if bit32.band(options.expansionOptionEnabled, 4) == 4 then
			options.expansionOptionEnabled = options.expansionOptionEnabled - 4
		else
			options.expansionOptionEnabled = options.expansionOptionEnabled + 4
		end
		settingsPannelMakeButtons()
	end
end

function expansionOptionStatusSwapGov(clickedObject, playerColor)
	if Player[playerColor].admin then
		if bit32.band(options.expansionOptionStatus, 1) == 1 then
			options.expansionOptionStatus = options.expansionOptionStatus - 1
		else
			options.expansionOptionStatus = options.expansionOptionStatus + 1
		end
		refreshExpansionButtons()
	end
end

function expansionOptionStatusReverse(clickedObject, playerColor)
	if Player[playerColor].admin then
		if bit32.band(options.expansionOptionStatus, 2) == 2 then
			options.expansionOptionStatus = options.expansionOptionStatus - 2
		else
			options.expansionOptionStatus = options.expansionOptionStatus + 2
		end
		refreshExpansionButtons()
	end
end

function decLiberalCards(clickedObject, playerColor)
	if Player[playerColor].admin then
		if options.liberalCards > 5 then
			options.liberalCards = options.liberalCards - 1
		end
		settingsPannelMakeButtons()
	end
end

function incLiberalCards(clickedObject, playerColor)
	if Player[playerColor].admin then
		if options.liberalCards < 8 then
			options.liberalCards = options.liberalCards + 1
		end
		settingsPannelMakeButtons()
	end
end

function decFascistCards(clickedObject, playerColor)
	if Player[playerColor].admin then
		if options.fascistCards > 10 then
			options.fascistCards = options.fascistCards - 1
		end
		settingsPannelMakeButtons()
	end
end

function incFascistCards(clickedObject, playerColor)
	if Player[playerColor].admin then
		if options.fascistCards < 15 then
			options.fascistCards = options.fascistCards + 1
		end
		settingsPannelMakeButtons()
	end
end

function decExpansionAmount(clickedObject, playerColor)
	if Player[playerColor].admin then
		if options.expansionAmount > 2 then
			options.expansionAmount = options.expansionAmount - 1
		end
		settingsPannelMakeButtons()
	end
end

function incExpansionAmount(clickedObject, playerColor)
	if Player[playerColor].admin then
		if options.expansionAmount < 3 then
			options.expansionAmount = options.expansionAmount + 1
		end
		settingsPannelMakeButtons()
	end
end

function addJaCard(cardIn)
	local player = string.gsub(cardIn.getDescription(), '\'s Ja Card', '')
	jaCardGuids[player] = cardIn.getGUID()
end

function addNeinCard(cardIn)
	local player = string.gsub(cardIn.getDescription(), '\'s Nein Card', '')
	neinCardGuids[player] = cardIn.getGUID()
end

function displayBannerCardsCoroutine()
	local tmpZone = getObjectFromGUID(bannerZoneGuid)
	local inZone = tmpZone.getObjects()
	local policyCard = nil
	local boardCard = nil

	-- get the cards
	for _, j in ipairs(inZone) do
		if isPolicyCard(j) then
			policyCard = j
		elseif isBoardCard(j) and not isBoardCardVeto(j) then
			boardCard = j
		end
	end

	-- kill old banners
	if bannerGuids then
		for _, j in ipairs(bannerGuids) do
			destroyObjectByGUID(j)
		end
	end
	bannerGuids = {}

	-- display and board card handler
	if policyCard and boardCard and not topdeck then
		displayBannerCard(policyCard, -14.5, 0)
		displayBannerCard(boardCard, 20.5, 4)
		boardCardHandler(boardCard)
	else
		displayBannerCard(policyCard, 0, 0)
		if lastPres and not topdeck then
			movePlacards(nextPres(lastPres), true)
		end
	end

	topdeck = false

	-- Win check
	if lastLiberalPlayed > 5 or lastFascistPlayed > 6 then
		if not options.dealRoleCards then giveRoleCards() end
	end

	return true
end

function displayBannerCard(card, offset, bannerGuidsOffset)
	local bannerCard = {}
	local params = {}
	params.snap_to_grid = false
	params.position = {offset, 33, 144}
	bannerCard[1] = card.clone(params)
	params.position = {-offset, 33, -144}
	bannerCard[2] = card.clone(params)
	params.position = {144, 33, -offset}
	bannerCard[3] = card.clone(params)
	params.position = {-144, 33, offset}
	bannerCard[4] = card.clone(params)
	wait(5)
	bannerCard[1].setRotation({90, 180, 0})
	bannerCard[2].setRotation({90, 0, 0})
	bannerCard[3].setRotation({90, 270, 0})
	bannerCard[4].setRotation({90, 90, 0})
	for i, j in ipairs(bannerCard) do
		bannerCard[i].setScale({13, 0, 13})
		bannerCard[i].setLock(true)
		bannerCard[i].interactable = false
		bannerGuids[i + bannerGuidsOffset] = bannerCard[i].guid
	end
end

function boardCardHandler(card)
	if isBoardCardInspect(card) then
		if lastPres then
			--expansion
			local abilitiesDeck = getDeckFromZoneByGUID(abilitiesPile_zone_guid)
			if abilitiesDeck then
				broadcastToAll('Delaying inspect 5 seconds...', {1,1,1})
				sleep(5)
			end
			if not options.dealPartyCards then createInspectButtons(lastPres) end
			if options.autoNotate then
				notateInfo(lastPres, 'inspects', '', '', true)
			end
		else
			printToAll('ERROR: Last president not found.', {1,0,0})
		end
	elseif isBoardCardPickPres(card) then
		if lastPres then
			if options.autoNotate then
				notateInfo(lastPres, 'gives pres to', '', '', true)
			end
		else
			printToAll('ERROR: Last president not found.', {1,0,0})
		end
	elseif isBoardCardBullet(card) then
		if lastPres then
			giveBullet(lastPres)
			if options.autoNotate then
				notateInfo(lastPres, string.lower(bulletInfo.action), '', '', true)
			end
		else
			printToAll('ERROR: Last president not found.', {1,0,0})
		end
	elseif isBoardCardTopCard(card) then
		if lastPres then
			broadcastToColor('Examine the top card from the deck and put it back in the draw pile.', lastPres, {1, 1, 1})
			drawCards(1, lastPres)
			if options.autoNotate then
				notateInfo(lastPres, 'examines deck:', '', '', false)
			end
		else
			printToAll('ERROR: Last president not found.', {1,0,0})
		end
	elseif isBoardCardTopThree(card) then
		if lastPres then
			broadcastToColor('Examine the top three cards from the deck and put them back in the draw pile (right to left to keep the order).', lastPres, {1, 1, 1})
			drawCards(3, lastPres)
			if options.autoNotate then
				notateInfo(lastPres, 'examines deck:', '', '', false)
			end
		else
			printToAll('ERROR: Last president not found.', {1,0,0})
		end
	end

	if lastPres then
		if isBoardCardPickPres(card) then
			local saveForcePres = forcePres
			forcePres = nil
			movePlacards(lastPres, true)
			if saveForcePres then
				forcePres = saveForcePres
			else
				forcePres = nextPres(lastPres)
			end
		else
			movePlacards(nextPres(lastPres), true)
		end
	end
end

function isPolicyCard(objIn)
	if objIn.tag == 'Card' and (objIn.getDescription() == 'Fascist Policy' or
		objIn.getDescription() == 'Liberal Policy') and not objIn.held_by_color then
		return true
	end
	return false
end

function isFascistPolicyCard(objIn)
	if objIn.tag == 'Card' and objIn.getDescription() == 'Fascist Policy' and not objIn.held_by_color then
		return true
	end
	return false
end

function isLiberalPolicyCard(objIn)
	if objIn.tag == 'Card' and objIn.getDescription() == 'Liberal Policy' and not objIn.held_by_color then
		return true
	end
	return false
end

function isPolicyNotUsedCard(objIn)
	if objIn.tag == 'Card' and objIn.getDescription() == 'Not Used' and not objIn.held_by_color then
		return true
	end
	return false
end

function isBoardCard(objIn)
	if objIn.tag == 'Card' and
	   (objIn.getDescription() == 'The president examines\nthe top card.' or
	    objIn.getDescription() == 'The president examines\nthe top three cards.' or
	    objIn.getDescription() == 'The president\ninvestigates a\nplayer\'s identity\ncard.' or
	    objIn.getDescription() == 'The president picks\nthe next presidential\ncandidate.' or
	    objIn.getDescription() == 'The president must\nkill a player.' or
		 objIn.getDescription() == 'Veto power is\nunlocked.') then
		return true
	end
	return false
end

function isBoardCardBullet(objIn)
	if objIn.tag == 'Card' and objIn.getDescription() == 'The president must\nkill a player.' then
		return true
	end
	return false
end

function isBoardCardInspect(objIn)
	if objIn.tag == 'Card' and objIn.getDescription() == 'The president\ninvestigates a\nplayer\'s identity\ncard.' then
		return true
	end
	return false
end

function isBoardCardTopCard(objIn)
	if objIn.tag == 'Card' and objIn.getDescription() == 'The president examines\nthe top card.' then
		return true
	end
	return false
end

function isBoardCardTopThree(objIn)
	if objIn.tag == 'Card' and objIn.getDescription() == 'The president examines\nthe top three cards.' then
		return true
	end
	return false
end

function isBoardCardPickPres(objIn)
	if objIn.tag == 'Card' and objIn.getDescription() == 'The president picks\nthe next presidential\ncandidate.' then
		return true
	end
	return false
end

function isBoardCardVeto(objIn)
	if objIn.tag == 'Card' and objIn.getDescription() == 'Veto power is\nunlocked.' then
		return true
	end
	return false
end

function nextPres(playerIn)
	local nextList
	if bit32.band(options.expansionOptionStatus, 2) == 2 then
		nextList = {White = 'Pink', Brown = 'White', Red = 'Brown', Orange = 'Red', Yellow = 'Orange', Green = 'Yellow', Teal = 'Green', Blue = 'Teal', Purple = 'Blue', Pink = 'Purple'}
	else
		nextList = {White = 'Brown', Brown = 'Red', Red = 'Orange', Orange = 'Yellow', Yellow = 'Green', Green = 'Teal', Teal = 'Blue', Blue = 'Purple', Purple = 'Pink', Pink = 'White'}
	end
	local checkPres = playerIn
	local returnVal = nextList[checkPres]

	while not inTable(players, returnVal) or (_G.playerStatus[returnVal] == 3) or (_G.playerStatus[returnVal] > 4)  do
		checkPres = returnVal
		returnVal = nextList[checkPres]
	end

	return returnVal
end

function movePlacards(playerIn, returnVoteCards)
	local moveToPlayer = playerIn
	if forcePres then
		moveToPlayer = forcePres
		forcePres = nil
	end

	--Expansion
	expansionCounters()

	if options.scriptedVoting and returnVoteCards then
		returnVoteCardsToHand()
		disableVote = false
		blockDraw = false
		votePassed = false
	end

	local tmpPres = getObjectFromGUID(president_guid)
	tmpPres.setVar('lastPres', moveToPlayer)
	if tmpPres then giveObjectToPlayer(tmpPres, moveToPlayer, {forward = prevForward, right = 0, up = 0, forceHeight = 2.2}, no_rotation, false, false) end
	local tmpChan = getObjectFromGUID(chancelor_guid)
	if tmpChan then giveObjectToPlayer(tmpChan, moveToPlayer, {forward = prevForward, right = 0, up = 0, forceHeight = 2.8}, no_rotation, false, false) end
end

function giveBullet(playerIn)
	local params = {}
	params.type = bulletInfo.type
	local bullet = spawnObject(params)
	custom = {}
	custom.mesh = bulletInfo.mesh
	custom.diffuse = bulletInfo.diffuse
	custom.assetbundle = bulletInfo.assetbundle
	custom.assetbundle_secondary = bulletInfo.assetbundle_secondary
	custom.image = bulletInfo.image
	custom.convex = bulletInfo.convex
	custom.material = bulletInfo.material
	custom.specular_color = bulletInfo.specular_color
	custom.specular_intensity = bulletInfo.specular_intensity
	custom.specular_sharpness = bulletInfo.specular_sharpness
	custom.fresnel_strength = bulletInfo.fresnel_strength
	bullet.use_grid = bulletInfo.use_grid
	bullet.setCustomObject(custom)
	bullet.setColorTint(bulletInfo.colorTint)
	bullet.setScale(bulletInfo.scale)
	bullet.setLuaScript(
			'loadDone = false\r\n' ..
			'\r\n' ..
			'function onLoad()\r\n' ..
			'	loadDone = true\r\n' ..
			'end\r\n' ..
			'\r\n' ..
			'function onDrop(playerColor)\r\n' ..
			'	local options = Global.getTable(\'options\')\r\n' ..
			'	if options.scriptedVoting then\r\n' ..
			'		Global.call(\'markDead\', {self})\r\n' ..
			'	end\r\n' ..
			'end\r\n' ..
			'\r\n' ..
			'function onCollisionEnter(collisionInfo)\r\n' ..
			'	if collisionInfo and loadDone then\r\n' ..
			'		if not self.interactable then\r\n' ..
			'			self.setLock(true)\r\n' ..
			'			self.interactable = true\r\n' ..
			'		end\r\n' ..
			'		local options = Global.getTable(\'options\')\r\n' ..
			'		if options.autoNotate then\r\n' ..
			'			if Global.call(\'callFunction\', {fcn = \'isTableGUID\', params = {collisionInfo.collision_object.guid}}) then\r\n' ..
			'				local bulletInfo = Global.getTable(\'bulletInfo\')\r\n' ..
			'				local notate = Global.getTable(\'notate\')\r\n' ..
			'				if notate.line and notate.action == string.lower(bulletInfo.action) then\r\n' ..
			'					Global.call(\'notateColor2ByObject\', {self})\r\n' ..
			'				end\r\n' ..
			'			end\r\n' ..
			'		end\r\n' ..
			'	end\r\n' ..
			'end\r\n')
	wait(5)
	bullet.setPosition({0, 30, 0})
	giveObjectToPlayer(bullet, playerIn, {forward = 20, right = 0, up = 0, forceHeight = 6}, no_rotation)
end

function markDead(tableIn)
	if type(tableIn) == 'table' then
		local victimColor = closestPlayer(tableIn[1], players, 18)
		if victimColor then
			_G.playerStatus[victimColor] = 5
			refreshStatusButtons()
			tableIn[1].interactable = false
		end
	end
end

function createPolicyCardTimer()
	Timer.destroy('policyCardTimer')
	local parameters = {}
	parameters.identifier = 'policyCardTimer'
	parameters.function_name = 'startPolicyCardCheck'
	parameters.function_owner = Global
	parameters.delay = 1
	Timer.create(parameters)
end

function startPolicyCardCheck()
	if not Global.getVar('hold') then
		Global.setVar('hold', true)
		startLuaCoroutine(Global, 'policyCardCoroutine')
	end
end

function policyCardCoroutine()
	local cardLists = {}
	local drawZone = nil
	local discardZone = nil
	local autoNotateReshuffle = false

	local homeTracker = function()
		local tracker = getObjectFromGUID(election_tracker_guid)
		if tracker then
			tracker.setPositionSmooth(electionTrackerOrgPos)
			tracker.setRotationSmooth({0, 315, 0})
		end
	end

	local movePrevPlacards = function()
		if lastPres and lastChan then
			local tmpPres = getObjectFromGUID(prev_president_guid)
			if tmpPres then giveObjectToPlayer(tmpPres, lastPres, {forward = prevForward, right = 0, up = 0, forceHeight = 1.1}, no_rotation, false, false) end
			local tmpChan = getObjectFromGUID(prev_chancelor_guid)
			if tmpChan then giveObjectToPlayer(tmpChan, lastChan, {forward = prevForward, right = 0, up = 0, forceHeight = 1.1}, no_rotation, false, false) end
		end
	end

	local homePrevPlacards = function()
		local tmpPres = getObjectFromGUID(prev_president_guid)
		if tmpPres then
			tmpPres.setRotationSmooth(flip_y, false, false)
			tmpPres.setPositionSmooth(prev_president_pos, false, false)
		end
		local tmpChan = getObjectFromGUID(prev_chancelor_guid)
		if tmpChan then
			tmpChan.setRotationSmooth(flip_y, false, false)
			tmpChan.setPositionSmooth(prev_chancelor_pos, false, false)
		end
	end

	drawZone = getObjectFromGUID(draw_zone_guid)
	discardZone = getObjectFromGUID(discard_zone_guid)

	if drawZone == nil or discardZone == nil then
		return true
	end

	-- Get the status of all cards and decks from the zones
	cardLists = getPolicyCardStatus(true)

	-- protect the cards
	if #cardLists.drawDeckList == 1 and #cardLists.drawList > 1 then
		local tmpDeck = getObjectFromGUID(cardLists.drawDeckList[1])
		if tmpDeck then
			tmpDeck.interactable = false
		end
	end
	if #cardLists.discardDeckList == 1 and #cardLists.discardList > 1 then
		local tmpDeck = getObjectFromGUID(cardLists.discardDeckList[1])
		if tmpDeck then
			tmpDeck.interactable = false
		end
	end

	--Expansion
	tmpObj = getDeckFromZoneByGUID(abilitiesPile_zone_guid)
	if tmpObj then tmpObj.interactable = false end
	tmpObj = getDeckFromZoneByGUID(effectsPile_zone_guid)
	if tmpObj then tmpObj.interactable = false end

	-- Msg if cards are added to the draw deck
	if lastDrawCt and #cardLists.drawList > lastDrawCt and #cardLists.drawDeckList == 1 then
		broadcastToAll('WARNING: One or more cards have been added to the draw deck!', {1,0,0})
	end
	lastDrawCt = #cardLists.drawList

	if started and #cardLists.fascistList > options.fascistCards then
		broadcastToAll('CHEATING DETECTED: Too many ' .. text.fascistAbbr ..  ' ' .. text.policy .. ' cards.', {1,0,0})
	end
	if started and #cardLists.liberalList > options.liberalCards then
		broadcastToAll('CHEATING DETECTED: Too many ' .. text.liberalAbbr ..  ' ' .. text.policy .. ' cards.', {1,0,0})
	end

	-- Location of all cards is known
	if started and #cardLists.fascistList == options.fascistCards and #cardLists.liberalList == options.liberalCards and (#cardLists.discardDeckList == 0 or #cardLists.discardDeckList == 1) then
		-- Reshuffle
		if #cardLists.drawList < 3 and #cardLists.discardDeckList == 1 and (#cardLists.drawDeckList == 0 or #cardLists.drawDeckList == 1) then
			if cardLists.drawDeckList[1] then
				local tmpDeck = getObjectFromGUID(cardLists.drawDeckList[1])
				pos = tmpDeck.getPosition()
			else
				pos = getPositionByGUID(draw_zone_guid)
			end
			broadcastToAll('Starting reshuffle...', {1,1,1})
			local discardDeck = getObjectFromGUID(cardLists.discardDeckList[1])
			discardDeck.setPositionSmooth({pos['x'], 3, pos['z']}, false, true)
			sleep(2)
			local expectedCards = #cardLists.drawList + #cardLists.discardList
			local drawDeck = getDeckFromZoneByGUID(draw_zone_guid)
			if drawDeck and #drawDeck.getObjects() == expectedCards then
				lastDrawCt = expectedCards
				drawDeck.shuffle()
				broadcastToAll('reshuffle done.', {1,1,1})
				autoNotateReshuffle = true
				local discardPileBoard = getObjectFromGUID(discardPileBoard_guid)
				if discardPileBoard then
					discardPileBoard.setName(0)
				end
			else
				broadcastToAll('ERROR: reshuffle FAILED! Please fix the issue.', {1,0,0})
				startLuaCoroutine(Global, 'disableSecurityCoroutine')
				return true
			end
		end

		-- Banners and board card handler
		if #cardLists.liberalPlayedList > 0 and (#cardLists.liberalPlayedList + #cardLists.liberalNotUsedList) > lastLiberalPlayed then
			lastLiberalPlayed = #cardLists.liberalPlayedList + #cardLists.liberalNotUsedList
			bannerZoneGuid = liberal_zone_guids[lastLiberalPlayed]
			tmpZone = getObjectFromGUID(bannerZoneGuid)
			inZone = tmpZone.getObjects()
			local liberalCardFound = false
			for i, j in ipairs(inZone) do
				if isLiberalPolicyCard(j) then
					if isFaceUp(j) then liberalCardFound = true end
				end
			end
			if liberalCardFound then
				if options.autoNotate then
					if topdeck then
						notateInfo('', 'Topdeck:', '', '[0080F8]' .. text.liberalLetter .. '[-]', false)
					else
						notateInfo(lastPres, '>', lastChan, '[0080F8]' .. text.liberalLetter .. '[-]', false)
					end
					homeTracker()
					if autoNotateReshuffle then notateInfo('', '', '', '*Reshuffle*', false) end
				end
				if topdeck then
					homePrevPlacards()
				else
					movePrevPlacards()
				end
				startLuaCoroutine(Global, 'displayBannerCardsCoroutine')
			else
				lastLiberalPlayed = 0 -- didn't find the card
			end
		elseif #cardLists.fascistPlayedList > 0 and (#cardLists.fascistPlayedList + #cardLists.fascistNotUsedList) > lastFascistPlayed then
			lastFascistPlayed = #cardLists.fascistPlayedList + #cardLists.fascistNotUsedList
			bannerZoneGuid = fascist_zone_guids[lastFascistPlayed]
			tmpZone = getObjectFromGUID(bannerZoneGuid)
			inZone = tmpZone.getObjects()
			local fascistCardFound = false
			for i, j in ipairs(inZone) do
				if isFascistPolicyCard(j) then
					if isFaceUp(j) then fascistCardFound = true end
				end
			end
			if fascistCardFound then
				if options.autoNotate then
					if topdeck then
						notateInfo('', 'Topdeck:', '', '[FF0000]' .. text.fascistLetter .. '[-]', false)
					else
						notateInfo(lastPres, '>', lastChan, '[FF0000]' .. text.fascistLetter .. '[-]', false)
					end
					homeTracker()
					if lastFascistPlayed == 4 then notateInfo('', '', '', '[FF0000]' .. text.hitler .. ' territory![-]', false) end
					if autoNotateReshuffle then notateInfo('', '', '', '*Reshuffle*', false) end
				end
				if topdeck then
					homePrevPlacards()
				else
					movePrevPlacards()
				end
				startLuaCoroutine(Global, 'displayBannerCardsCoroutine')
			else
				lastFascistPlayed = 0 -- didn't find the card
			end
		end
	end

	Global.setVar('hold', false)

	return true
end

function getPolicyCardStatus(removeCards)
	local returnTable = {}
	returnTable.fascistList = {}
	returnTable.fascistPlayedList = {}
	returnTable.fascistNotUsedList = {}
	returnTable.liberalList = {}
	returnTable.liberalPlayedList = {}
	returnTable.liberalNotUsedList = {}
	returnTable.drawList = {}
	returnTable.drawDeckList = {}
	returnTable.discardList = {}
	returnTable.discardDeckList = {}
	local removeCt = 0
	local cardError = false
	local drawZone = nil
	local discardZone = nil

	drawZone = getObjectFromGUID(draw_zone_guid)
	discardZone = getObjectFromGUID(discard_zone_guid)

	local inZone = drawZone.getObjects()
	for i, j in ipairs(inZone) do
		if isFascistPolicyCard(j) then
			smartTableInsert(returnTable.fascistList, j.guid)
			smartTableInsert(returnTable.drawList, j.guid)
			smartTableInsert(returnTable.drawDeckList, j.guid)
		elseif isLiberalPolicyCard(j) then
			smartTableInsert(returnTable.liberalList, j.guid)
			smartTableInsert(returnTable.drawList, j.guid)
			smartTableInsert(returnTable.drawDeckList, j.guid)
		elseif j.tag == 'Deck' then
			smartTableInsert(returnTable.drawDeckList, j.guid)
			local inDeck = j.getObjects()
			for k, l in ipairs(inDeck) do
				if l.description == 'Fascist Policy' then
					smartTableInsert(returnTable.fascistList, l.guid)
					smartTableInsert(returnTable.drawList, l.guid)
				elseif l.description == 'Liberal Policy' then
					smartTableInsert(returnTable.liberalList, l.guid)
					smartTableInsert(returnTable.drawList, l.guid)
				elseif removeCards and removeCt < (#inDeck - 1) then
					local params = {}
					params.position = {0,5,0}
					params.guid = l.guid
					local card = j.takeObject(params)
					if not cardError then
						cardError = true
						printToAll('ERROR: That is not a policy card.', {1,0,0})
					end
					removeCt = removeCt + 1
				end
			end
		end
	end
	removeCt = 0
	inZone = discardZone.getObjects()
	for i, j in ipairs(inZone) do
		if j.tag == 'Deck' then
			smartTableInsert(returnTable.discardDeckList, j.guid)
			local inDeck = j.getObjects()
			for k, l in ipairs(inDeck) do
				if l.description == 'Fascist Policy' then
					smartTableInsert(returnTable.fascistList, l.guid)
					smartTableInsert(returnTable.discardList, l.guid)
				elseif l.description == 'Liberal Policy' then
					smartTableInsert(returnTable.liberalList, l.guid)
					smartTableInsert(returnTable.discardList, l.guid)
				elseif removeCards and removeCt < (#inDeck - 1) then
					local params = {}
					params.position = {0,5,0}
					params.guid = l.guid
					local card = j.takeObject(params)
					if not cardError then
						cardError = true
						printToAll('ERROR: That is not a policy card.', {1,0,0})
					end
					removeCt = removeCt + 1
				end
			end
		end
	end
	local tmpZoneGuid
	local tmpZone
	local cardFound = false
	for i = #liberal_zone_guids, 1, -1 do
		tmpZone = getObjectFromGUID(liberal_zone_guids[i])
		if tmpZone then
			inZone = tmpZone.getObjects()
			for _, j in ipairs(inZone) do
				if isLiberalPolicyCard(j) then
					smartTableInsert(returnTable.liberalList, j.guid)
					smartTableInsert(returnTable.liberalPlayedList, j.guid)
					cardFound = true
				elseif isPolicyNotUsedCard(j) and cardFound then
					smartTableInsert(returnTable.liberalNotUsedList, j.guid)
				end
			end
		end
	end
	cardFound = false
	for i = #fascist_zone_guids, 1, -1 do
		tmpZone = getObjectFromGUID(fascist_zone_guids[i])
		if tmpZone then
			inZone = tmpZone.getObjects()
			for _, j in ipairs(inZone) do
				if isFascistPolicyCard(j) then
					smartTableInsert(returnTable.fascistList, j.guid)
					smartTableInsert(returnTable.fascistPlayedList, j.guid)
					cardFound = true
				elseif isPolicyNotUsedCard(j) and cardFound then
					smartTableInsert(returnTable.fascistNotUsedList, j.guid)
				end
			end
		end
	end

	return returnTable
end

function allPolicyCardsKnown()
	local cardLists = {}

	cardLists = getPolicyCardStatus(false)
	if started and #cardLists.fascistList == options.fascistCards and #cardLists.liberalList == options.liberalCards and #cardLists.drawDeckList == 1 and (#cardLists.discardDeckList == 0 or #cardLists.discardDeckList == 1) then
		return true
	end

	return false
end

function createVoteTimer()
	if not disableVote then
		Timer.destroy('voteTimer')
		local parameters = {}
		parameters.identifier = 'voteTimer'
		parameters.function_name = 'startVoteCheck'
		parameters.function_owner = Global
		parameters.delay = 1
		Timer.create(parameters)
	end
end

function startVoteCheck()
	local jaVote
	local neinVote
	local voteDone = true
	votes = {}

	for i, playerColor in pairs(players) do
		jaVote = 0
		neinVote = 0
		jaCard = getObjectFromGUID(jaCardGuids[playerColor])
		neinCard = getObjectFromGUID(neinCardGuids[playerColor])
		local ph = Player[playerColor].getPlayerHand()
		if ph and jaCard and neinCard and not (_G.playerStatus[playerColor] > 3) then
			local pos = {x = ph['pos_x'], y = ph['pos_y'], z = ph['pos_z']}
			local distance = findDistance(jaCard.getPosition(), pos);
			if distance > 8 then
				if not isFaceUp(jaCard) and not jaCard.held_by_color then
					jaVote = 1
				else
					voteDone = false
				end
			end
			distance = findDistance(neinCard.getPosition(), pos);
			if distance > 8 then
				if not isFaceUp(neinCard) and not neinCard.held_by_color then
					neinVote = -1
				else
					voteDone = false
				end
			end
		end
		votes[playerColor] = jaVote + neinVote
		if (jaVote + neinVote) == 0 and not (_G.playerStatus[playerColor] > 3) then
			voteDone = false
		end
	end

	if voteDone then
		voteNotes = getFinalVoteString()
		setNotes(voteNotes .. '\n\n' .. mainNotes)
		local presColor = getPres()
		local chanColor = getChan()
		local out = '[' .. stringColorToHex(presColor) .. ']' .. presColor .. '[-] > '
		out = out .. '[' .. stringColorToHex(chanColor) .. ']' .. chanColor .. '[-]\n'
		out = out .. voteNotes
		if voteNotebook == '' then
			voteNotebook = out
		else
			voteNotebook = voteNotebook .. '\n\n' .. out
		end
		lastVote = out
		for _, lastVoteGuid in ipairs(lastVote_guids) do
			local lastVoteObj = getObjectFromGUID(lastVoteGuid)
			if lastVoteObj then lastVoteObj.TextTool.setValue(removeBBCode(out)) end
		end
		flipVotes()
		disableVote = true
		if string.find(out, 'Vote passes') then
			votePassed = true
		else
			votePassed = false
		end
	else
		voteNotes = getPrelimVoteString()
		setNotes(voteNotes .. '\n\n' .. mainNotes)
	end
end

function expansionCounters()
	local allObjs = getAllObjects()
	local tmpObj

	for _, tmpObj in ipairs(allObjs) do
		if tmpObj then
			if tmpObj.tag == 'Counter' and string.match(tmpObj.getName(), 'Turns') then
				tmpObj.Counter.decrement()
			end
		end
	end
end

function waitReturnVoteCardsCoroutine()
	sleep(5)
	returnVoteCardsToHand()
	disableVote = false
	blockDraw = false
	votePassed = false

	return true
end

function flipVotes()
	for i, playerColor in pairs(players) do
		jaCard = getObjectFromGUID(jaCardGuids[playerColor])
		neinCard = getObjectFromGUID(neinCardGuids[playerColor])
		local ph = Player[playerColor].getPlayerHand()
		if ph and jaCard and neinCard and not (_G.playerStatus[playerColor] > 3) then
			local pos = {x = ph['pos_x'], y = ph['pos_y'], z = ph['pos_z']}
			local distance = findDistance(jaCard.getPosition(), pos);
			if distance > 8 then jaCard.flip() end
			distance = findDistance(neinCard.getPosition(), pos);
			if distance > 8 then neinCard.flip() end
		end
	end
end

function returnVoteCardsToHand()
	for i, playerColor in pairs(players) do
		jaCard = getObjectFromGUID(jaCardGuids[playerColor])
		neinCard = getObjectFromGUID(neinCardGuids[playerColor])
		if jaCard and neinCard then
			local jaCardRot = jaCard.getRotation()
			jaCardRot.exactRot = true
			giveObjectToPlayer(jaCard, playerColor, {forward = 0, right = 0, up = 0}, jaCardRot, false, true)
			local neinCardRot = neinCard.getRotation()
			neinCardRot.exactRot = true
			giveObjectToPlayer(neinCard, playerColor, {forward = 0, right = 0, up = 0}, neinCardRot, false, true)
		end
	end
end

function getFinalVoteString()
	local jaCount = 0
	local neinCount = 0
	local out = '[i]Ja votes[/i]: '
	for i, playerColor in pairs(main_playable_colors) do -- used for the order
		if votes[playerColor] == 1 and inTable(players, playerColor) then
			if string.sub(out, -1) == ']' then out = out .. ', ' end
			out = out .. '[' .. stringColorToHex(playerColor) .. ']' .. playerColor .. '[-]'
			jaCount = jaCount + 1
		end
	end
	if jaCount == 0 then out = out .. 'None' end
	out = out .. '[/i]\n[i]Nein votes[/i]:[i] '
	for i, playerColor in pairs(main_playable_colors) do -- used for the order
		if votes[playerColor] == -1 and inTable(players, playerColor) then
			if string.sub(out, -1) == ']' then out = out .. ', ' end
			out = out .. '[' .. stringColorToHex(playerColor) .. ']' .. playerColor .. '[-]'
			neinCount = neinCount + 1
		end
	end
	if neinCount == 0 then out = out .. 'None' end
	out = out .. '[/i]'
	if jaCount > neinCount then
		broadcastToAll('Vote passes', stringColorToRGB('Green'))
		out = '[' .. stringColorToHex('Green') .. ']-<<<<· Vote passes <══¦-•\n' .. '[-]' .. out
	else
		broadcastToAll('Vote fails', stringColorToRGB('Red'))
		out = '[' .. stringColorToHex('Red') .. ']-<<<<· Vote fails <══¦-•\n' .. '[-]' .. out
		if options.autoNotate then
			local lineSave = noteTakerCurrLine
			noteTakerCurrLine = #noteTakerNotes
			if not noteTakerBlankLine(noteTakerCurrLine) then
				addNewLine()
				noteTakerCurrLine = #noteTakerNotes
			end
			noteTakerNotes[noteTakerCurrLine].color1 = getPres()
			noteTakerNotes[noteTakerCurrLine].action = '>'
			noteTakerNotes[noteTakerCurrLine].color2 = getChan()
			noteTakerNotes[noteTakerCurrLine].result = '[222222]Downvoted[-]'
			noteTakerCurrLine = lineSave
			refreshNotes(nil)
			local tracker = getObjectFromGUID(election_tracker_guid)
			if tracker then
				tracker.translate({electionTrackerMoveX, 0, 0})
			end
		end
		movePlacards(nextPres(getPres()), false)
		startLuaCoroutine(Global, 'waitReturnVoteCardsCoroutine')
	end

	return out
end

function getPrelimVoteString()
	local out = '[u]Voted[/u]:[i] '
	for i, playerColor in pairs(main_playable_colors) do
		if votes[playerColor] ~= 0 and inTable(players, playerColor) and not (_G.playerStatus[playerColor] > 3) then
			if string.sub(out, -1) == ']' then out = out .. ', ' end
			out = out .. '[' .. stringColorToHex(playerColor) .. ']' .. playerColor .. '[-]'
		end
	end
	out = out .. '[/i]\n[u]Waiting on[/u]:[i] '
	for i, playerColor in pairs(main_playable_colors) do
		if votes[playerColor] == 0 and inTable(players, playerColor) and not (_G.playerStatus[playerColor] > 3) then
			if string.sub(out, -1) == ']' then out = out .. ', ' end
			out = out .. '[' .. stringColorToHex(playerColor) .. ']' .. playerColor .. '[-]'
		end
	end
	out = out .. '[/i]'

	return out
end

function editButtonByLabel(objectGUIDIn, oldLabelIn, newLabelIn, newFunctionIn)
	local bObject = getObjectFromGUID(objectGUIDIn)
	if bObject then
		local buttonList = bObject.getButtons()
		if buttonList then
			local button
			for _, button in ipairs(buttonList) do
				if button.label == oldLabelIn then
					button.label = newLabelIn
					button.click_function = newFunctionIn
					bObject.editButton(button)
				end
			end
		end
	end
end

function topdeckCard(clickedObject, playerColor)
	if started then
		if playerColor == getPres() then
			drawDeck = getDeckFromZoneByGUID(draw_zone_guid)
			if drawDeck then
				lastPres = playerColor
				topdeck = true
				local params = {}
				params.position = {0, 2, 0}
				params.flip = true
				local card = drawDeck.takeObject(params)
				if isLiberalPolicyCard(card) then
					broadcastToAll('The topdeck is '.. text.liberalArticle .. ' ' .. text.liberal .. ' ' .. text.policy .. '!', {0.1, 0.3, 1})
				else
					broadcastToAll('The topdeck is '.. text.fascistArticle .. ' ' .. text.fascist .. ' ' .. text.policy .. '!', {1,0,0})
				end
			else
				broadcastToAll('ERROR: Draw deck not found.', {1, 0, 0})
			end
		else
			printToColor('ERROR: You are not the president.', playerColor, {1, 0, 0})
		end
	else
		printToColor('ERROR: Game not started.', playerColor, {1, 0, 0})
	end
end

function drawThree(clickedObject, playerColor)
	if started then
		if bit32.band(options.expansionOptionStatus, 1) == 1 then
			if playerColor == getChan() then
				if blockDraw then
					broadcastToColor('ERROR: You can only draw once (move the Chancellor placard to reset).', playerColor, {1, 0, 0})
				else
					if not options.scriptedVoting or votePassed then
						blockDraw = true
						drawCards(3, playerColor)
					else
						broadcastToColor('ERROR: Vote did not pass.', playerColor, {1, 0, 0})
					end
				end
			else
				broadcastToColor('ERROR: You are not the chancellor.', playerColor, {1, 0, 0})
			end
		else
			if playerColor == getPres() then
				if blockDraw then
					broadcastToColor('ERROR: You can only draw once (move the Chancellor placard to reset).', playerColor, {1, 0, 0})
				else
					if not options.scriptedVoting or votePassed then
						blockDraw = true
						drawCards(3, playerColor)
					else
						broadcastToColor('ERROR: Vote did not pass.', playerColor, {1, 0, 0})
					end
				end
			else
				broadcastToColor('ERROR: You are not the president.', playerColor, {1, 0, 0})
			end
		end
	else
		broadcastToColor('ERROR: Game not started.', playerColor, {1, 0, 0})
	end
end

function drawCards(amount, playerColor)
	local drawCt = 0
	local drawDeck = nil

	drawDeck = getDeckFromZoneByGUID(draw_zone_guid)
	if drawDeck then
		drawCt = #drawDeck.getObjects()
		if drawCt > (amount - 1) then
			if bit32.band(options.expansionOptionEnabled, 4) == 4 and bit32.band(options.expansionOptionStatus, 1) == 1 then
				lastPres = getChan()
				lastChan = getPres()
			else
				lastPres = getPres()
				lastChan = getChan()
			end
			drawDeck.dealToColor(amount, playerColor)
			if amount == 1 then
				broadcastToAll('Dealing 1 card to ' .. playerColor .. '.', stringColorToRGB(playerColor))
			else
				broadcastToAll('Dealing ' .. amount .. ' cards to ' .. playerColor .. '.', stringColorToRGB(playerColor))
			end
		else
			broadcastToAll('ERROR: Too few cards to deal.', {1, 0, 0})
		end
	else
		broadcastToAll('ERROR: Draw deck not found.', {1, 0, 0})
	end
end

function getPres()
	local tempObj = getObjectFromGUID(president_guid)
	return closestPlayer(tempObj, players, 1000)
end

function getChan()
	local tempObj = getObjectFromGUID(chancelor_guid)
	return closestPlayer(tempObj, players, 1000)
end

function onPlayerChangedColor(color)
	if started then
		if not (color == 'Grey') and not (color == 'Black') then
			printToColor('--------------------------------------',color, {1, 1, 1})
			printToColor('Welcome! ' .. Player[color].steam_name,color, {1, 1, 1})
			printToColor('--------------------------------------',color, {1, 1, 1})
			Player[color]:print(tellRole(color))
			printToColor('--------------------------------------',color, {1, 1, 1})
			Player[color]:print(chatHelp(Player[color]))
		elseif color == 'Black' then
			printToAll('--------------------------------------', {1, 1, 1})
			local hcol = stringColorToRGB(color)
			printToAll('All hail the omniscient Black player ' .. Player[color].steam_name, {hcol['r'], hcol['g'], hcol['b']})
			printToAll('--------------------------------------', {1, 1, 1})
			Player[color]:print(tellRole(color))
			printToColor('--------------------------------------',color, {1, 1, 1})
			Player[color]:print(chatHelp(Player[color]))
		end
	else
		local needRefresh = true
		if lastPlayerCt then
			if lastPlayerCt < 7 and #getSeatedPlayers() < 7 then
				needRefresh = false
			elseif lastPlayerCt > 6 and lastPlayerCt < 9 and
					 #getSeatedPlayers() > 6 and #getSeatedPlayers() < 9 then
				needRefresh = false
			elseif lastPlayerCt > 8 and #getSeatedPlayers() > 8 then
				needRefresh = false
			end
		end
		if needRefresh then
			refreshBoardCards()
		end
	end
end

function foundBoardCards()
	local tmpZoneGuid
	for _, tmpZoneGuid in ipairs(liberal_zone_guids) do
		tmpZone = getObjectFromGUID(tmpZoneGuid)
		if tmpZone then
			inZone = tmpZone.getObjects()
			for i, j in ipairs(inZone) do
				if isBoardCard(j) then
					return true
				elseif j.getDescription() == 'Not Used' then
					return true
				end
			end
		end
	end
	for _, tmpZoneGuid in ipairs(fascist_zone_guids) do
		tmpZone = getObjectFromGUID(tmpZoneGuid)
		if tmpZone then
			inZone = tmpZone.getObjects()
			for i, j in ipairs(inZone) do
				if isBoardCard(j) then
					return true
				elseif j.getDescription() == 'Not Used' then
					return true
				end
			end
		end
	end
	return false
end

function deleteBoardCards()
	local tmpZoneGuid
	for _, tmpZoneGuid in ipairs(liberal_zone_guids) do
		tmpZone = getObjectFromGUID(tmpZoneGuid)
		if tmpZone then
			inZone = tmpZone.getObjects()
			for i, j in ipairs(inZone) do
				if isBoardCard(j) then
					j.destruct()
				elseif j.getDescription() == 'Not Used' then
					j.destruct()
				end
			end
		end
	end
	for _, tmpZoneGuid in ipairs(fascist_zone_guids) do
		tmpZone = getObjectFromGUID(tmpZoneGuid)
		if tmpZone then
			inZone = tmpZone.getObjects()
			for i, j in ipairs(inZone) do
				if isBoardCard(j) then
					j.destruct()
				elseif j.getDescription() == 'Not Used' then
					j.destruct()
				end
			end
		end
	end
end

function addMissingItems(deck, count)
	if deck then
		local pos = deck.getPosition()
		local addCt = count - #deck.getObjects()
		local params = {}
		params.position = {pos['x'], pos['y'] + 1, pos['z']}
		local card = deck.takeObject(params)
		while addCt > 0 do
			params.position = {pos['x'], pos['y'] + 1 + addCt * 0.1, pos['z']}
			local newCard = card.clone(params)
			newCard.putObject(deck)
			addCt = addCt - 1
		end
		card.putObject(deck)
	end
end

function deleteExtraItems(deck, count)
	if deck then
		local pos = deck.getPosition()
		local removeCt = #deck.getObjects() - count
		while removeCt > 0 do
			local params = {}
			params.position = {pos['x'], pos['y'] + 3, pos['z']}
			local card = deck.takeObject(params)
			card.destruct()
			removeCt = removeCt - 1
		end
	end
end

function setupStart(clickedObject, playerColor)
	if Player[playerColor].admin then
		startLuaCoroutine(Global, 'setupCoroutine')
	else
		broadcastToColor('Only the host or a promoted player can start the game.', playerColor, {1,0,0})
	end
end

function setupCoroutine()
	local tmpObj

	--Get seated players
	players = getSeatedPlayers()

	if #players < 5 then
		printToAll('Not enough players!', {1,1,1})
		return true
	end

	local playerOneName = Player[players[1]].steam_name
	if not playerOneName or string.match(playerOneName, 'Player %d') then
		printToAll('Hotseat game detected.', {1,1,1})
		if options.shufflePlayers then
			options.shufflePlayers = false
			printToAll('Shuffle players is now disabled.', {1,0,0})
		end
		if options.policySafety then
			options.policySafety = false
			printToAll('Policy safety is now disabled.', {1,0,0})
		end
	end

	if options.shufflePlayers then
		printToAll('Shuffling Players...', {1,1,1})
		shufflePlayers()
		printToAll('shuffling done.', {1,1,1})
	end

	--Hidden zones and status buttons
	for i, player in pairs(main_playable_colors) do
		if not inTable(players, player) then
			destroyObjectByGUID(hidden_zone_guids[player])
		else
			if options.zoneType == 1 then
				local params = {
					type = 'BlockRectangle',
					scale = {15, 0.25, 0.5},
					position = {-100, 100, -100}
				}
				local block = spawnObject(params)
				block.setColorTint(stringColorToRGB(player))
				block.setLock(true)
				forceObjectToPlayer(block, player, {forward = 7, right = 0, up = 0, forceHeight = 1.09}, flip_y)
			end
			-- Player Status Buttons
			local paramsStatus = {
				type = 'backgammon_piece_white',
				position = {-100, 100, -100},
				callback_owner = selfIn,
				callback = 'statusButtonCallback'
			}
			local buttonStatusBase = spawnObject(paramsStatus)
			buttonStatusBase.setColorTint(stringColorToRGB(player))
			buttonStatusBase.setLock(true)
			forceObjectToPlayer(buttonStatusBase, player, {forward = 11, right = -8.5, up = 0, forceHeight = 1.09}, flip_y)
			local buttonStatus = {
				click_function = 'changePlayerStatus',
				color = boardColor_rgb,
				label = '',
				function_owner = self,
				position = {0, 0.2, 0},
				rotation = {0, 180, 0},
				width = 2800,
				height = 1500,
				font_size = 600
			}
			buttonStatusBase.createButton(buttonStatus)
		end
	end

	--Expansion
	local abilitiesDeck = getDeckFromZoneByGUID(abilitiesPile_zone_guid)
	if abilitiesDeck then
		abilitiesDeck.randomize()
		abilitiesDeck.deal(options.expansionAmount)
	else
		local tmpZone = getObjectFromGUID(abilitiesPile_zone_guid)
		if tmpZone then
			local inZone = tmpZone.getObjects()
			for _, j in ipairs(inZone) do
				destroyObject(j)
			end
			destroyObject(tmpZone)
		end
		tmpZone = getObjectFromGUID(effectsPile_zone_guid)
		if tmpZone then
			inZone = tmpZone.getObjects()
			for _, j in ipairs(inZone) do
				destroyObject(j)
			end
			destroyObject(tmpZone)
		end
	end

	--spawn note taker(s)
	local params = {}
	params.position = {-100, 100, -100}
	if options.noteType == 1 then
		params.type = 'Chess_Board'
		params.scale = {1.54999959, 1.54999959, 1.54999959}
	elseif options.noteType == 2 then
		params.type = 'Go_Board'
		params.scale = {1.44999969, 1.44999969, 1.44999969}
	elseif options.noteType == 3 then
		params.type = 'Checker_Board'
		params.scale = {1.54999959, 1.54999959, 1.54999959}
	elseif options.noteType == 4 then
		params.type = 'reversi_board'
		params.scale = {1.44999969, 1.44999969, 1.44999969}
	elseif options.noteType == 5 then
		params.type = 'Custom_Board'
		params.scale = {1, 1, 1}
	elseif options.noteType == 6 then
		params.type = 'Custom_Model'
		params.scale = {1.05, 1.05, 1.05}
	elseif options.noteType > 6 then
		params.type = 'backgammon_board'
		params.scale = {1.79999948, 1.79999948, 1.79999948}
	end
	for _, player in pairs(players) do
		if Player[player].admin or options.noteType > 6 then
			local notetaker = spawnObject(params)
			if options.noteType < 7 then
				notetaker.setLuaScript(newNoteTakerLuaScript(player, 'true', 'false', 'false', 'false', 'false', 'true'))
			elseif options.noteType == 7 then
				notetaker.setLuaScript(newNoteTakerLuaScript(player, 'false', 'false', 'false', 'false', 'false', 'false'))
			elseif options.noteType == 8 then
				notetaker.setLuaScript(newNoteTakerLuaScript(player, 'false', 'true', 'false', 'false', 'false', 'false'))
			end
			if options.noteType == 5 then
				local custom = {}
				custom.image = 'http://cloud-3.steamusercontent.com/ugc/486766424829587499//FDF54ECD5D1706DE0A590239E84D62CDE757FE46/'
				notetaker.setCustomObject(custom)
			elseif options.noteType == 6 then
					local custom = {}
					custom.diffuse = 'http://cloud-3.steamusercontent.com/ugc/478894184492866532/6639B6E1AB511AB10D53DB91B2A47A0A63410DDF/'
					custom.mesh = 'http://cloud-3.steamusercontent.com/ugc/478894184492865468/51C18F993BBDD5D1B55FE5261A625B2CE0B2FD9F/'
					custom.type = 4
					custom.material = 3
					notetaker.setCustomObject(custom)
			end
		end
	end

	--destroy the settings pannel
	destroyObjectByGUID(settingsPannel_guid)

	local numFascists = 0

	--figure out number of fascists
	if #players > 8 then
		numFascists = 3
	elseif #players > 6 then
		numFascists = 2
	else
		numFascists = 1
	end

	printToAll( #players .. ' player game starting!', {1,1,1})

	local fascistDecks = {}
	local liberalDecks = {}

	for i = 1, #fascist_deck_guids do
 		fascistDecks[i] = getObjectFromGUID(fascist_deck_guids[i])
 	end
 	for i = 1, #liberal_deck_guids do
 		liberalDecks[i] = getObjectFromGUID(liberal_deck_guids[i])
 	end

	shuffleTable(fascistDecks)
	shufflePosition(fascistDecks)
	shuffleTable(liberalDecks)
	shufflePosition(liberalDecks)

	wait(5)

	--Figure out which decks we're using
	local player_decks = {}
	for i=1,#players do
		if i == 1 then
			player_decks[i] = getObjectFromGUID(hitler_deck_guid)
		elseif i <= numFascists+1 then
			player_decks[i] = fascistDecks[i-1]
		else
			player_decks[i] = liberalDecks[i-numFascists-1]
		end
	end

	--Cleanup Extra Cards
	for i = numFascists+1, #fascist_deck_guids do
		destroyObject(fascistDecks[i])
	end
	for i = #players-numFascists, #liberal_deck_guids do
		destroyObject(liberalDecks[i])
	end

	--Shuffle Roles/Players
	shuffleTable(player_decks)
	shufflePosition(player_decks)
	shuffleTable(players)

	wait(5)

	--Deal the Cards
	for i, player in ipairs(players) do
		for j=1, #player_decks[i].getObjects() do
			local params = {}
			local card = player_decks[i].takeObject(params)

			local description = card.getDescription()
			local offset = 0;

			if description == 'Hitler Role Card' then
				roles[player] = 'hitler'
				table.insert(hitler, 1, player)
				offset = -2
			elseif description == 'Fascist Role Card' then
				roles[player] = 'fascist'
				table.insert(fascists, 1, player)
				offset = -2
			elseif description == 'Liberal Role Card' then
				roles[player] = 'liberal'
				offset = -2
			elseif description == 'Fascist Party Card' or
				description == 'Liberal Party Card' then
				offset = -1
				if options.dealPartyCards then
					giveObjectToPlayer(card, player, {forward = 0, right = offset, up = 0}, flip_y_z, false, true)
				else
					destroyObject(card)
				end
			elseif description == 'Ja Card' then
				card.setDescription(player .. '\'s Ja Card')
				card.setLuaScript(
					'collision = false -- workaround for rewind error\r\n' ..
					'\r\n' ..
					'function onObjectSpawn(spawnObject)\r\n' ..
					'	Global.call(\'callFunction\', {fcn = \'addJaCard\', params = {self}})\r\n' ..
					'end\r\n' ..
					'\r\n' ..
					'function onDrop(playerColor)\r\n' ..
					'	local options = Global.getTable(\'options\')\r\n' ..
					'	if options.scriptedVoting then\r\n' ..
					'		collision = true\r\n' ..
					'		Global.call(\'createVoteTimer\')\r\n' ..
					'	end\r\n' ..
					'end\r\n' ..
					'\r\n' ..
					'function onCollisionEnter(collisionInfo)\r\n' ..
					'	local options = Global.getTable(\'options\')\r\n' ..
					'	if collision and options.scriptedVoting then\r\n' ..
					'		Global.call(\'createVoteTimer\')\r\n' ..
					'	end\r\n' ..
					'end\r\n')
				card.setScale({1.51, 1, 1.51})
				offset = 1
				giveObjectToPlayer(card, player, {forward = 0, right = offset, up = 0}, flip_y_z, false, true)
			elseif description == 'Nein Card' then
				card.setDescription(player .. '\'s Nein Card')
				card.setLuaScript(
					'collision = false -- workaround for rewind error\r\n' ..
					'\r\n' ..
					'function onObjectSpawn(spawnObject)\r\n' ..
					'	Global.call(\'callFunction\', {fcn = \'addNeinCard\', params = {self}})\r\n' ..
					'end\r\n' ..
					'\r\n' ..
					'function onDrop(playerColor)\r\n' ..
					'	local options = Global.getTable(\'options\')\r\n' ..
					'	if options.scriptedVoting then\r\n' ..
					'		collision = true\r\n' ..
					'		Global.call(\'createVoteTimer\')\r\n' ..
					'	end\r\n' ..
					'end\r\n' ..
					'\r\n' ..
					'function onCollisionEnter(collisionInfo)\r\n' ..
					'	local options = Global.getTable(\'options\')\r\n' ..
					'	if collision and options.scriptedVoting then\r\n' ..
					'		Global.call(\'createVoteTimer\')\r\n' ..
					'	end\r\n' ..
					'end\r\n')
				card.setScale({1.51, 1, 1.51})
				offset = 2
				giveObjectToPlayer(card, player, {forward = 0, right = offset, up = 0}, flip_y, false, true)
			end
			if offset == -2 then
				if options.dealRoleCards then
					giveObjectToPlayer(card, player, {forward = 0, right = offset, up = 0}, flip_y_z, false, true)
				else
					local tmpGUID = player_decks[i].getVar('displayGuid')
					if not tmpGUID then
						tmpGUID = string.format('%06x', tonumber(card.getGUID(), 16) + 1)
					end
					playerRoleCardGuids[player] = tmpGUID
					destroyObject(card)
				end
			end
		end
	end

	mainNotes = 'For long games the old notes will be\nremoved automatically by the note taker.\nThis is functionality does not work well when\nenabling player names in the notes.\n\n'
	mainNotes = mainNotes .. 'Only the president can draw cards.\n\nTo topdeck a card move the election tracker\nto the \34REVEAL & PASS TOP POLICY\34 circle.\n\n'
	if not options.dealRoleCards then
		mainNotes = mainNotes .. '[FFFF00]No role cards will be dealt.[-]\n\n'
	end
	if not options.dealPartyCards then
		mainNotes = mainNotes .. '[FFFF00]No party membership cards will be dealt.[-]\n\n'
	end
	mainNotes = mainNotes .. 'There are [0000FF][b]' .. #players - #fascists - #hitler .. ' ' .. string.upper(text.liberal) .. 'S[/b][-]\nagainst '
	if #fascists > 0 then
		mainNotes = mainNotes .. '[FF0000][b]' .. #fascists .. ' ' .. string.upper(text.fascist) .. '[/b][-]'
	end
	if #hitler > 1 and #fascists > 0 then
		mainNotes = mainNotes .. ','
	end
	if #hitler > 1 then
		mainNotes = mainNotes .. ' [FF0000][b]' .. #hitler - 1 .. ' FAKE ' .. string.upper(text.hitler)
	end
	if #hitler == 2 then
		mainNotes = mainNotes .. '[/b][-]'
	elseif #hitler > 2 then
		mainNotes = mainNotes .. 'S[/b][-]'
	end
	mainNotes = mainNotes .. ' and [FF0000][b]' .. string.upper(text.hitler) .. '[/b][-].\n'
	mainNotes = mainNotes .. string.upper(text.hitler)
	if (#players - #fascists - #hitler) > 4 then
		mainNotes = mainNotes .. ' [b]doesn\'t know[/b] who the '
	else
		mainNotes = mainNotes .. ' [b]knows[/b] who the '
	end
	mainNotes = mainNotes .. string.upper(text.fascist) .. 'S are.\n\n'
	setNotes(mainNotes)

	-- Pick a random first president
	local randomPlayer = math.random(#players)
	local president = getObjectFromGUID(president_guid)
	local pos = president.getPosition()
	president.setVar('lastPres', players[randomPlayer])
	president.setPositionSmooth({0, pos['y']+7, 0})
	local chancelor = getObjectFromGUID(chancelor_guid)
	pos = chancelor.getPosition()
	chancelor.setPositionSmooth({0, pos['y']+14, 0})

	-- Policy card setup
	local params = {}
	params.flip = false
	local drawDeck = getDeckFromZoneByGUID(draw_zone_guid)
	if drawDeck then
		local pos = drawDeck.getPosition()
		local remove_fascistCt = 15 - options.fascistCards
		local remove_liberalCt = 8 - options.liberalCards
		local inDeck = drawDeck.getObjects()
		for k, l in ipairs(inDeck) do
			if l.description == 'Fascist Policy' and remove_fascistCt > 0 then
				local params = {}
				params.position = {pos['x'], pos['y'] + 7, pos['z']}
				params.guid = l.guid
				local card = drawDeck.takeObject(params)
				wait(5)
				destroyObject(card)
				remove_fascistCt = remove_fascistCt - 1
			elseif l.description == 'Liberal Policy' and remove_liberalCt > 0 then
				local params = {}
				params.position = {pos['x'], pos['y'] + 7, pos['z']}
				params.guid = l.guid
				local card = drawDeck.takeObject(params)
				wait(5)
				destroyObject(card)
				remove_liberalCt = remove_liberalCt - 1
			end
		end
	else
		broadcastToAll('ERROR: Could not find draw deck! Restart required.', {1,0,0})
		return true
	end

	sleep(0.5)

	-- Tell everyone their role
	printToAll('--------------------------------------', {1,1,1})
	for _, color in ipairs(players) do
		Player[color]:print(tellRole(color))
	end
	printToAll('--------------------------------------', {1,1,1})

	-- Move and tell first pres
	giveObjectToPlayer(president, players[randomPlayer], {forward = 11, right = 0, up = 0, forceHeight = 3}, no_rotation)
	giveObjectToPlayer(chancelor, players[randomPlayer], {forward = 11, right = 0, up = 0, forceHeight = 5.5}, no_rotation)
	local hcol = stringColorToRGB(players[randomPlayer])
	printToAll(players[randomPlayer] .. ' is first president!',{hcol['r'], hcol['g'], hcol['b']})
	printToAll('--------------------------------------', {1,1,1})
	for _, player in ipairs(players) do
		Player[player]:print(chatHelp(Player[player]))
	end

	-- Cleanup custom pieces
	for _, v in pairs(all_deck_guids) do
		destroyObject(getObjectFromGUID(v));
	end

	sleep(1)

	--Shuffle the policy deck
	if not shuffleDrawDeck() then
		broadcastToAll('ERROR: Unable to shuffle draw deck! Restart required.', {1,0,0})
		return true
	end

	-- interactable/unlock other items
	president.setLock(false)
	president.interactable = true
	chancelor.setLock(false)
	chancelor.interactable = true
	tmpObj = getObjectFromGUID(election_tracker_guid)
	tmpObj.setLock(false)
	if #players == 5 then
		destroyObjectByGUID(prev_president_guid)
	else
		tmpObj = getObjectFromGUID(prev_president_guid)
		tmpObj.setLock(false)
	end
	tmpObj = getObjectFromGUID(prev_chancelor_guid)
	tmpObj.setLock(false)

	-- Lock placed board cards
	local tmpZoneGuid
	for _, tmpZoneGuid in ipairs(liberal_zone_guids) do
		tmpZone = getObjectFromGUID(tmpZoneGuid)
		if tmpZone then
			inZone = tmpZone.getObjects()
			for _, j in ipairs(inZone) do
				if isBoardCard(j) then
					j.setLock(true)
				elseif j.getDescription() == 'Not Used' then
					j.setLock(true)
				end
			end
		end
	end
	for _, tmpZoneGuid in ipairs(fascist_zone_guids) do
		tmpZone = getObjectFromGUID(tmpZoneGuid)
		if tmpZone then
			inZone = tmpZone.getObjects()
			for _, j in ipairs(inZone) do
				if isBoardCard(j) then
					j.setLock(true)
				elseif j.getDescription() == 'Not Used' then
					j.setLock(true)
				end
			end
		end
	end

	--Set the started variable to true
	started = true
	refreshUI()

	return true
end

function statusButtonCallback(objIn, paramsIn)
	table.insert(playerStatusButtonGuids, 1, objIn.getGUID())
end

function changePlayerStatus(clickedObject, playerColor)
	if Player[playerColor].admin then
		local ownerColor = closestPlayer(clickedObject, players, 18)
		_G.playerStatus[ownerColor] = _G.playerStatus[ownerColor] + 1
		local abilitiesDeck = getDeckFromZoneByGUID(abilitiesPile_zone_guid)
		if not abilitiesDeck then
			if _G.playerStatus[ownerColor] == 3 then
				_G.playerStatus[ownerColor] = 5
			end
		end
		if _G.playerStatus[ownerColor] > 6 then _G.playerStatus[ownerColor] = 1 end
		refreshStatusButtons()
	else
		printToColor('ERROR: You are not the host or a promoted player.', playerColor, {1, 0, 0})
	end
end

function tellRole(player)
	local msg = ''
	if player == 'Black' then
		if #hitler == 0 and #fascists == 0 and #players > 0 then
			msg = msg .. '[0080F8]Everyone is ' .. text.liberalArticle .. ' ' .. text.liberal .. '![-]\n'
		else
			for _, l in pairs(hitler) do
				msg = msg .. '[' .. stringColorToHex(l) .. ']' .. l .. ' is ' .. text.hitler .. '!' .. '[-]\n'
			end
			for _, l in pairs(fascists) do
				msg = msg .. '[' .. stringColorToHex(l) .. ']' .. l .. ' is ' .. text.fascistArticle .. ' ' .. text.fascist .. '!' .. '[-]\n'
			end
		end
	else
		local role = roles[player]
		if role == 'fascist' then
			msg = msg .. '[' .. stringColorToHex(player) .. ']You are ' .. text.fascistArticle .. ' [FF0000]' .. text.fascist .. '[-]![-]\n'
			for _, l in pairs(hitler) do
				msg = msg .. '[' .. stringColorToHex(l) .. ']' .. l .. ' is ' .. text.hitler .. '!' .. '[-]\n'
			end
			for _, l in pairs(fascists) do
				if not (l == player) then
					msg = msg .. '[' .. stringColorToHex(l) .. ']' .. l .. ' is ' .. text.fascistArticle .. ' ' .. text.fascist .. ', too!' .. '[-]\n'
				end
			end
		elseif role == 'hitler' then
			msg = msg .. '[' .. stringColorToHex(player) .. ']You are [FF0000]' .. text.hitler .. '[-]![-]\n'
			if #players < 7 then
				for _, l in pairs(hitler) do
					if not (l == player) then
						msg = msg .. '[' .. stringColorToHex(l) .. ']' .. l .. ' is also ' .. text.hitler .. '!' .. '[-]\n'
					end
				end
				for _, l in pairs(fascists) do
					msg = msg .. '[' .. stringColorToHex(l) .. ']' .. l .. ' is ' .. text.fascistArticle .. ' ' .. text.fascist .. '!' .. '[-]\n'
				end
			end
		elseif role == 'liberal' then
			msg = msg .. '[' .. stringColorToHex(player) .. ']You are ' .. text.liberalArticle .. ' [0080F8]' .. text.liberal .. '[-]![-]\n'
		else
			msg = msg .. player .. ' is not Playing!\n'
		end
	end

	return string.gsub(msg, '\n$', '')
end

function shuffleDrawDeck()
	local drawDeck = getDeckFromZoneByGUID(draw_zone_guid)
	if drawDeck then
		drawDeck.shuffle()
		return true
	end

	return false
end

function disableSecurity()
	startLuaCoroutine(Global, 'disableSecurityCoroutine')
end

function disableSecurityCoroutine()
	local allObjs = getAllObjects()
	local tmpObj

	Global.setVar('hold', true)
	broadcastToAll('WARNING: Security has been disabled for 30 seconds!', {1,0,0})
	for _, tmpObj in ipairs(allObjs) do
		if isPolicyCard(tmpObj) then
			tmpObj.interactable = true
		elseif tmpObj.tag == 'Deck' then
			tmpObj.interactable = true
		end
	end
	sleep(30)

	--Expansion
	tmpObj = getDeckFromZoneByGUID(abilitiesPile_zone_guid)
	if tmpObj then tmpObj.interactable = false end
	tmpObj = getDeckFromZoneByGUID(effectsPile_zone_guid)
	if tmpObj then	tmpObj.interactable = false end

	Global.setVar('hold', false)

	return true
end

function createInspectButtons(pres)
	local membershipCard = getObjectFromGUID(fakeMembership_card_guid)

	if membershipCard then
		broadcastToColor('Click on the party membership card of the person you want to inspect.', pres, {1, 1, 1})
		for i, playerColor in ipairs(players) do
			if playerColor ~= pres and not inTable(inspected, playerColor) and not (_G.playerStatus[playerColor] > 4) then
				local params = {}
				params.rotation = {0, 0, 180}
				card = membershipCard.clone(params)
				card.setDescription('Fake Party Card')
				card.setLuaScript(
					'playerColor = \'' .. playerColor .. '\'\r\n\r\n' ..
					'function onCollisionEnter(collision_info)\r\n' ..
					'	local ph = Player[playerColor].getPlayerHand()\r\n' ..
					'	if ph then\r\n' ..
					'		self.setRotation({0, ph[\'rot_y\']+180, 180})\r\n' ..
					'		self.setLock(true)\r\n' ..
					'	end\r\n' ..
					'end\r\n\r\n' ..
					'function onLoad(saveString)\r\n' ..
					'	local button = {}\r\n' ..
					'	button.click_function = \'' .. playerColor .. 'Inspected\'\r\n' ..
					'	button.label = \'Inspect\\n' .. playerColor .. '\'\r\n' ..
					'	button.function_owner = Global\r\n' ..
					'	button.position = {0, 3, 0}\r\n' ..
					'	button.rotation = {0, 0, 180}\r\n' ..
					'	button.width = 1000\r\n' ..
					'	button.height = 1500\r\n' ..
					'	button.font_size = 150\r\n' ..
					'	self.createButton(button)\r\n' ..
					'end')
				card.setPosition({0, 30 + (i * 0.25), 0})
				card.setLock(false)
				wait(5)
				giveObjectToPlayer(card, playerColor, {forward = 16.5, right = 0, up = 0}, flip_y_z)
			end
		end
	else
		printToAll('ERROR: Base membership card not found.', {1,0,0})
	end
end

function playerInspected(clickedObject, inspectorColor, checkedColor)
	if inspectorColor == lastPres then
		local role = roles[checkedColor]
		local playerColor = stringColorToRGB(checkedColor)
		local roleText
		local roleColor
		if role == 'hitler' or role == 'fascist' then
			roleText = text.fascistArticle .. ' ' .. string.lower(text.fascist)
			roleColor = {1, 0, 0}
		else
			roleText = text.liberalArticle .. ' ' .. string.lower(text.liberal)
			roleColor = {0.1, 0.3, 1}
		end
		printToAll(inspectorColor .. ' inspected ' .. checkedColor, playerColor)
		broadcastToColor(checkedColor .. ' is ' .. roleText .. '!', inspectorColor, roleColor)
		table.insert(inspected, 1, checkedColor)
		removeInspect()
		if options.autoNotate and notate.line and notate.action == 'inspects' then
			noteTakerNotes[notate.line].color2 = checkedColor
			refreshNotes(nil)
			notate.line = nil
			notate.action = ''
		end
	end
end

function WhiteInspected(clickedObject, inspectorColor)
	playerInspected(clickedObject, inspectorColor, 'White')
end

function BrownInspected(clickedObject, inspectorColor)
	playerInspected(clickedObject, inspectorColor, 'Brown')
end

function RedInspected(clickedObject, inspectorColor)
	playerInspected(clickedObject, inspectorColor, 'Red')
end

function OrangeInspected(clickedObject, inspectorColor)
	playerInspected(clickedObject, inspectorColor, 'Orange')
end

function YellowInspected(clickedObject, inspectorColor)
	playerInspected(clickedObject, inspectorColor, 'Yellow')
end

function GreenInspected(clickedObject, inspectorColor)
	playerInspected(clickedObject, inspectorColor, 'Green')
end

function TealInspected(clickedObject, inspectorColor)
	playerInspected(clickedObject, inspectorColor, 'Teal')
end

function BlueInspected(clickedObject, inspectorColor)
	playerInspected(clickedObject, inspectorColor, 'Blue')
end

function PurpleInspected(clickedObject, inspectorColor)
	playerInspected(clickedObject, inspectorColor, 'Purple')
end

function PinkInspected(clickedObject, inspectorColor)
	playerInspected(clickedObject, inspectorColor, 'Pink')
end

function removeInspect()
	local allObjs = getAllObjects()
	local object

	for _, object in ipairs(allObjs) do
		if object.tag == 'Card' and (object.getDescription() == 'Fake Party Card') then
			destroyObject(object)
		end
	end
end

function giveRoleCards()
	if not options.dealRoleCards then
		for i, player in ipairs(main_playable_colors) do
			if playerRoleCardGuids[player] then
				local card = getObjectFromGUID(playerRoleCardGuids[player])
				if card then
					local pos = card.getPosition()
					local params = {}
					params.position = {pos['x'], pos['y'] + 1 + i * 0.1, pos['z']}
					local newCard = card.clone(params)
					newCard.interactable = true
					newCard.setLock(false)
					forceObjectToPlayer(newCard, player, {forward = 0, right = -2, up = 0}, flip_y_z)
				end
			end
		end
		options.dealRoleCards = true
	end
end

function findUnusedColor()
	local checkList = {'Brown', 'Teal', 'Black', 'White', 'Red', 'Orange', 'Yellow', 'Green', 'Blue', 'Purple', 'Pink'}

	for _, playerColor in ipairs(checkList) do
		if not Player[playerColor].seated then
			return playerColor
		end
	end
end

function shufflePlayers()
	local blackSteamId
	if #getSeatedPlayers() == 10 and Player['Black'].seated then
		blackSteamId = Player['Black'].steam_id
		Player['Black']:changeColor('Grey')
		while Player['Black'].seated do
			coroutine.yield()
		end
	end
	swapColor = findUnusedColor()

	local ranColors = {}
	for _, v in pairs(getSeatedPlayers()) do
		if (not Player[v].host) or options.shuffleHost then
			table.insert(ranColors, 1, v)
		end
	end
	shuffleTable(ranColors)

	seatedPlayers = {}
	local j = 1
	for _, v in pairs(getSeatedPlayers()) do
		if (not Player[v].host) or options.shuffleHost then
			local playerInfo = {}
			playerInfo.target = ranColors[j]
			playerInfo.myColor = v
			table.insert(seatedPlayers, 1, playerInfo)
			j = j + 1
		end
	end

	local doneCount = 0
	local tryCount = #seatedPlayers
	while doneCount ~= #seatedPlayers and tryCount > 0 do
		doneCount = 0
		for i, v in pairs(seatedPlayers) do
			if v.target ~= v.myColor then
				if Player[v.target].seated == false then
					local myC = v.myColor
					if Player[myC].seated == true then
						Player[myC]:changeColor(v.target)
						while Player[myC].seated and not Player[v.target].seated do
							coroutine.yield()
						end
						v.myColor = v.target
						doneCount = doneCount + 1
					end
				elseif Player[swapColor].seated == false then
					local myC = v.myColor
					if Player[myC].seated == true then
						Player[myC]:changeColor(swapColor)
						while Player[myC].seated and not Player[swapColor].seated do
							coroutine.yield()
						end
						v.myColor = swapColor
					end
				end
			else
				doneCount = doneCount + 1
			end
		end
		tryCount = tryCount - 1
		coroutine.yield()
	end

	if blackSteamId then
		for _, p in pairs(Player.getSpectators()) do
			if p.steam_id == blackSteamId then
				p:changeColor('Black')
			end
		end
	end
end

function notateColor2ByObject(tableIn)
	if type(tableIn) == 'table' then
		if tableIn[1] then
			local playerColor = closestPlayer(tableIn[1], players, 18)
			if playerColor and notate.line then
				if noteTakerNotes[notate.line].color1 ~= playerColor then
					noteTakerNotes[notate.line].color2 = playerColor
					refreshNotes(nil)
					notate.line = nil
					notate.action = ''
				end
			end
		end
	end
end

function shufflePosition(objects)
	local positionA
	local positionB

	for i = 1, #objects * 5 do
		local a = math.random(#objects)
		local b = math.random(#objects)
		positionA = objects[a].getPosition()
		positionB = objects[b].getPosition()
		objects[b].setPosition(positionA)
		objects[a].setPosition(positionB)
	end
end

function shuffleTable(objects)
	for i = 1, #objects * 5 do
		local a = math.random(#objects)
		local b = math.random(#objects)
		objects[a], objects[b] = objects[b], objects[a]
	end
end

function isFaceUp(cardIn)
	if cardIn then
		local zrot=cardIn.getRotation()['z']
		if zrot > -20 and zrot < 20 then
			return true
		else
			return false
		end
	else
		return nil
	end
end

function getPositionByGUID(guidIn)
	local tmpZone = getObjectFromGUID(guidIn)
	return tmpZone.getPosition()
end

function getDeckFromZoneByGUID(guidIn)
	local deck = nil
	local deck_ct = 0
	local zone = getObjectFromGUID(guidIn)
	local object

	if zone then
		local inZone = zone.getObjects()
		for _, object in ipairs(inZone) do
			if object.tag == 'Card' then
				deck_ct = 2
			elseif object.tag == 'Deck' then
				deck = object
				deck_ct = deck_ct + 1
			end
		end
	end
	if deck_ct == 1 then
		return deck
	end
	return nil
end

function moveObjectToPlayerByGUID(tableIn)
	local object = getObjectFromGUID(tableIn.guid)
	if object then
		local playerColor = closestPlayer(object, players, tableIn.max)
		if playerColor then
			giveObjectToPlayer(object, playerColor, {forward = tableIn.forward, right = 0, up = 0, forceHeight = tableIn.height}, no_rotation, false, true)
		end
	end
end

function inTable(tableIn, valueIn)
	local value
	if tableIn then
		for _, value in pairs(tableIn) do
			if value == valueIn then
				return true
			end
		end
	end
	return false
end

function smartTableInsert(tableIn, valueIn)
	if not inTable(tableIn, valueIn) then
		table.insert(tableIn, 1, valueIn)
	end
end

function isTableGUID(GUIDIn)
	if not GUIDIn then -- Base table
		return true
	end

	return false
end

function versionInfo()
	local msg

	msg = _VERSION -- Lua info
	if mod_name then
		msg = msg .. '\nmod_name = ' .. mod_name
	else
		msg = msg .. '\nmod_name = nil'
	end
	if update_version then
		msg = msg .. '\nupdate_version = ' .. update_version
	else
		msg = msg .. '\nupdate_version = nil'
	end
	msg = msg .. '\nGlobal Lua length ' .. string.len(Global.getLuaScript())

	return msg
end

--------------------------------------------------------------------------------
--Note Taker
--------------------------------------------------------------------------------

useColor = true
cooperative = false
colorMatch = false
useNames = false
playerNoteTaker = ''
privateFogGUID = nil
privateScreenGUID = nil
swapLF = false
moveTracker = true
prevPresColor = nil
prevChanColor = nil
nextPost = nil
forceMenu = nil
lastGUID = nil
editMode = true -- true is right, false is left
--CUT HERE
model_list = {}
image_list = {}
no_button_list = {}

menu_unicode = '☰'
up_unicode = '▲'
right_unicode = '►'
down_unicode = '▼'
left_unicode = '◄'

noteTakerNotes = {}
noteTakerCurrLine = 0

rightOffset = {White = 0, Brown = 0, Red = 0, Orange = 2.5, Yellow = -2.5, Green = 0, Teal = 0, Blue = 0, Purple = 2.5, Pink = -2.5}
colorOffset = {White = 0, Brown = 0, Red = 0, Orange = 0, Yellow = 0, Green = 5, Teal = 5, Blue = 5, Purple = 5, Pink = 5}
cancelDestroy = false
functionName = nil
sharedHistory = false

-- Defaults (custom board)
positionXscale = 1
positionY = 0.6
positionZscale = 1
positionZoffset1 = 0
positionZoffset2 = 0
rotationZ = 0
giveHeight = 0
giveForward = -19
buttonScale = 1
fontScale = 1
maxLines = 25
prevForward = 11
textColorReplace = 'FFFFFF]'

-- tracker (default)
electionTrackerOrgPos = {x = -3.970005, y = 1.27525151, z = -9.385001}
electionTrackerMoveX = 2.7

function noteTakerOnLoad(saveString)
	self.setDescription('Note Taker by Lost Savage\nBased on the work of:\nsmiling Aktheon,\nSwiftPanda,\nThe Blind Dragon\nand Max\n')
	if not (saveString == '') then
		local save = JSON.decode(saveString)
		useColor = save['c']
		cooperative = save['co']
		colorMatch = save['m']
		useNames = save['n']
		noteTakerNotes = save['ntn']
		noteTakerCurrLine = save['ntcl']
		playerNoteTaker = save['p']
		privateFogGUID = save['pfg']
		privateScreenGUID = save['psg']
		swapLF = save['s']
		moveTracker = save['t']
	end

	if self.name ~= 'backgammon_board' then
		sharedHistory = true
		Global.call('initNoteTakerValues', {self.name})
		if Global.getVar('noteTakerCurrLine') == 0 then
			Global.call('addNewLine')
		end
	else
		initNoteTakerValues(self.name)
		if noteTakerCurrLine == 0 then
			addNewLine()
		end
		local oldNoteTaker = getObjectFromGUID(lastGUID)
		if oldNoteTaker then
			noteTakerNotes = oldNoteTaker.getTable('noteTakerNotes')
			noteTakerCurrLine = oldNoteTaker.getVar('noteTakerCurrLine')
		end
	end

	if playerNoteTaker and not (playerNoteTaker == '') then
		if forceMenu then
			forceMenu = false
			if sharedHistory then
				Global.call('menu', {self})
			else
				menu(self)
			end
		else
			if sharedHistory then
				Global.call('setupBoard', {self})
			else
				setupBoard(self)
			end
		end
	else
		if sharedHistory then
			Global.call('menu', {self})
		else
			menu(self)
		end
	end
end

function notetakerOnSave()
	local save = {}
	save['c'] = useColor
	save['co'] = cooperative
	save['m'] = colorMatch
	save['n'] = useNames
	save['ntn'] = noteTakerNotes
	save['ntcl'] = noteTakerCurrLine
	save['p'] = playerNoteTaker
	save['pfg'] = privateFogGUID
	save['psg'] = privateScreenGUID
	save['s'] = swapLF
	save['t'] = moveTracker

	local saveString = JSON.encode(save)

	return saveString
end

function notetakerOnDestroy()
	if not cancelDestroy then
		if privateScreenGUID then destroyObjectByGUID(privateScreenGUID) end
		if privateFogGUID then destroyObjectByGUID(privateFogGUID) end
	end
end

function initNoteTakerValues(boardName)
	if type(boardName) == 'table' then
		boardName = boardName[1]
	end

	if boardName == 'Chess_Board' then
		positionXscale = -1
		positionY = -0.9
		rotationZ = 180
	elseif boardName == 'Checker_Board' then
		positionXscale = -1
		positionY = -0.1
		rotationZ = 180
		giveHeight = 1
	elseif boardName == 'Go_Board' then
		positionXscale = -1.1
		positionY = -1.3
		positionZscale = 1.1
		rotationZ = 180
		giveHeight = -1
		buttonScale = 1.1
		fontScale = 1.1
	elseif boardName == 'reversi_board' then
		positionXscale = -1.1
		positionY = -1.5
		positionZscale = 1.1
		rotationZ = 180
		giveHeight = -1
		buttonScale = 1.1
		fontScale = 1.1
	elseif boardName == 'backgammon_board' then
		positionXscale = -0.9
		positionY = -0.1
		positionZscale = 0.9
		positionZoffset1 = 4.5
		positionZoffset2 = 4.2
		rotationZ = 180
		giveHeight = 1
		giveForward = -26
		buttonScale = 0.9
		fontScale = 0.9
		maxLines = 10
		textColorReplace = '000000]'

		noteTakerSetNotes = function(stringIn)
			local out = string.gsub(stringIn, stringColorToHex('White') .. ']', textColorReplace)
			local screen = getObjectFromGUID(privateScreenGUID)
			if screen then
				screen.setDescription(out)
			end
		end
	elseif boardName == 'Custom_Model' then
		positionXscale = 1.5
		positionZscale = 1.5
		buttonScale = 1.5
		fontScale = 1.5
	end

	local options = Global.getTable('options')
	if options.scriptedVoting and boardName.name ~= 'backgammon_board' then
		maxLines = 19
	end
end

function spawnWaitDestructCoroutine()
	local params = {}
	params.type = self.name
	params.scale = self.getScale()
	params.position = self.getPosition()
	params.rotation = self.getRotation()
	local notetaker = spawnObject(params)
	notetaker.setLuaScript(respawnNoteTakerLuaScript())
	notetaker.setLock(true)
	if params.type == 'Custom_Board' then
		local custom = {}
		if image_list[functionName] then
			custom.image = image_list[functionName]
		elseif image_list['default'] then
			custom.image = image_list['default']
		else
			custom.image = 'http://cloud-3.steamusercontent.com/ugc/486766424829587499/FDF54ECD5D1706DE0A590239E84D62CDE757FE46/'
		end
		notetaker.setCustomObject(custom)
	elseif params.type == 'Custom_Model' then
		local custom = {}
		if image_list[functionName] then
			custom.diffuse = image_list[functionName]
		elseif image_list['default'] then
			custom.diffuse = image_list['default']
		else
			custom.diffuse = 'http://cloud-3.steamusercontent.com/ugc/478894184492866532/6639B6E1AB511AB10D53DB91B2A47A0A63410DDF/'
		end
		if model_list[functionName] then
			custom.mesh = model_list[functionName]
		elseif image_list['default'] then
			custom.mesh = model_list['default']
		else
			custom.mesh = 'http://cloud-3.steamusercontent.com/ugc/478894184492865468/51C18F993BBDD5D1B55FE5261A625B2CE0B2FD9F/'
		end
		custom.type = 4
		custom.material = 3
		notetaker.setCustomObject(custom)
	end
	wait(5)
	cancelDestroy = true
	self.destruct()

	return true
end

function menuButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		clickedObject.setVar('forceMenu', true)
		clickedObject.setVar('functionName', 'menu')
		startLuaCoroutine(clickedObject, 'spawnWaitDestructCoroutine')
	end
end

function menu(selfIn)
	if type(selfIn) == 'table' then
		selfIn = selfIn[1]
	end

	if selfIn.name == 'backgammon_board' then
		local screen = getObjectFromGUID(privateScreenGUID)
		if screen then
			forceObjectToPlayer(screen, selfIn.getVar('playerNoteTaker'), {forward = giveForward + 12.5, right = rightOffset[selfIn.getVar('playerNoteTaker')], up = 0, forceHeight = 0.9}, {x = 0, y = 180 - rotationZ, z = 0})
			screen.setLock(true)
			startLuaCoroutine(selfIn, 'spawnFogCoroutine')
		else
			if selfIn.getVar('playerNoteTaker') ~= '' then
				forceMenu = true
				spawnScreen(selfIn)
				return
			end
		end
	end
	if no_button_list['menu'] then
		positionY = -0.1
	end

	local buttonParam = {rotation = {0, 0, rotationZ}, font_size = 300 * fontScale}
	if sharedHistory then
		buttonParam.function_owner = Global
	else
		buttonParam.function_owner = self
	end

	selfIn.clearButtons()

	local fakePlayerNoteTaker = false
	if selfIn.getVar('playerNoteTaker') == '' then
		fakePlayerNoteTaker = true
		selfIn.setVar('playerNoteTaker', 'White')
	end

	-- Who is the note taker?
	if selfIn.name == 'backgammon_board' then
		local screen = getObjectFromGUID(privateScreenGUID)
		if screen then
			screen.setDescription('\n\n\n\n\n\n\n\n\n                      Who is the note taker?')
		end
	else
		buttonParam.click_function = 'nullFunction'
		buttonParam.label = 'Who is the note taker?'
		buttonParam.position = {positionXscale * 0, positionY, (-8.3 * positionZscale) + positionZoffset1}
		buttonParam.height = 500 * buttonScale
		buttonParam.width = 3500 * buttonScale
		selfIn.createButton(buttonParam)
	end

	-- Player Options
	buttonParam.height = 700 * buttonScale
	buttonParam.width = 1800 * buttonScale
	if not cooperative or Player[selfIn.getVar('playerNoteTaker')].admin then
		buttonParam.click_function = 'setupWhite'
		buttonParam.label = 'White'
		buttonParam.position = {positionXscale * 4, positionY, (-2.25 * positionZscale) + positionZoffset1}
		buttonParam.color = stringColorToRGB('White')
		selfIn.createButton(buttonParam)

		buttonParam.click_function = 'setupBrown'
		buttonParam.label = 'Brown'
		buttonParam.position = {positionXscale * 0, positionY, (-2.25 * positionZscale) + positionZoffset1}
		buttonParam.color = stringColorToRGB('Brown')
		selfIn.createButton(buttonParam)

		buttonParam.click_function = 'setupRed'
		buttonParam.label = 'Red'
		buttonParam.position = {positionXscale * -4, positionY, (-2.25 * positionZscale) + positionZoffset1}
		buttonParam.color = stringColorToRGB('Red')
		selfIn.createButton(buttonParam)

		buttonParam.click_function = 'setupOrange'
		buttonParam.label = 'Orange'
		buttonParam.position = {positionXscale * -6, positionY, (-3.75 * positionZscale) + positionZoffset1}
		buttonParam.color = stringColorToRGB('Orange')
		selfIn.createButton(buttonParam)

		buttonParam.click_function = 'setupYellow'
		buttonParam.label = 'Yellow'
		buttonParam.position = {positionXscale * -6, positionY, (-5.25 * positionZscale) + positionZoffset1}
		buttonParam.color = stringColorToRGB('Yellow')
		selfIn.createButton(buttonParam)

		buttonParam.click_function = 'setupGreen'
		buttonParam.label = 'Green'
		buttonParam.position = {positionXscale * -4, positionY, (-6.75 * positionZscale) + positionZoffset1}
		buttonParam.color = stringColorToRGB('Green')
		selfIn.createButton(buttonParam)

		buttonParam.click_function = 'setupTeal'
		buttonParam.label = 'Teal'
		buttonParam.position = {positionXscale * 0, positionY, (-6.75 * positionZscale) + positionZoffset1}
		buttonParam.color = stringColorToRGB('Teal')
		selfIn.createButton(buttonParam)

		buttonParam.click_function = 'setupBlue'
		buttonParam.label = 'Blue'
		buttonParam.position = {positionXscale * 4, positionY, (-6.75 * positionZscale) + positionZoffset1}
		buttonParam.color = stringColorToRGB('Blue')
		selfIn.createButton(buttonParam)

		buttonParam.click_function = 'setupPurple'
		buttonParam.label = 'Purple'
		buttonParam.position = {positionXscale * 6, positionY, (-5.25 * positionZscale) + positionZoffset1}
		buttonParam.color = stringColorToRGB('Purple')
		selfIn.createButton(buttonParam)

		buttonParam.click_function = 'setupPink'
		buttonParam.label = 'Pink'
		buttonParam.position = {positionXscale * 6, positionY, (-3.75 * positionZscale) + positionZoffset1}
		buttonParam.color = stringColorToRGB('Pink')
		selfIn.createButton(buttonParam)
	end

	buttonParam.click_function = 'setupMe'
	buttonParam.label = 'Me'
	buttonParam.position = {positionXscale * 0, positionY, (-4.5 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGB('White')
	selfIn.createButton(buttonParam)

	menuBase(selfIn)

	if fakePlayerNoteTaker then
		selfIn.setVar('playerNoteTaker', '')
	end
end

function menuBase(selfIn)
	local buttonParam = {rotation = {0, 0, rotationZ}, font_size = 300 * fontScale}
	local text = Global.getTable('text')

	if sharedHistory then
		buttonParam.function_owner = Global
	else
		buttonParam.function_owner = self
	end

	buttonParam.click_function = 'flipUseNames'
	if useNames then buttonParam.label = 'x' else buttonParam.label = '' end
	buttonParam.position = {positionXscale * -7.5, positionY, (1.25 * positionZscale) + positionZoffset2}
	buttonParam.width = 300 * buttonScale
	buttonParam.height = 300 * buttonScale
	selfIn.createButton(buttonParam)
	buttonParam.label = 'Use player names'
	buttonParam.position = {positionXscale * -4, positionY, (1.25 * positionZscale) + positionZoffset2}
	buttonParam.width = 2700 * buttonScale
	buttonParam.height = 700 * buttonScale
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'flipUseColor'
	if useColor then buttonParam.label = 'x' else buttonParam.label = '' end
	buttonParam.position = {positionXscale * -7.5, positionY, (2.75 * positionZscale) + positionZoffset2}
	buttonParam.width = 300 * buttonScale
	buttonParam.height = 300 * buttonScale
	selfIn.createButton(buttonParam)
	buttonParam.label = 'Use color'
	buttonParam.position = {positionXscale * -4, positionY, (2.75 * positionZscale) + positionZoffset2}
	buttonParam.width = 2700 * buttonScale
	buttonParam.height = 700 * buttonScale
	selfIn.createButton(buttonParam)

	if selfIn.name ~= 'backgammon_board' or Player[selfIn.getVar('playerNoteTaker')].admin then
		buttonParam.click_function = 'flipMoveTracker'
		if moveTracker then buttonParam.label = 'x' else buttonParam.label = '' end
		buttonParam.position = {positionXscale * -7.5, positionY, (4.25 * positionZscale) + positionZoffset2}
		buttonParam.width = 300 * buttonScale
		buttonParam.height = 300 * buttonScale
		selfIn.createButton(buttonParam)
		buttonParam.label = 'Move tracker'
		buttonParam.position = {positionXscale * -4, positionY, (4.25 * positionZscale) + positionZoffset2}
		buttonParam.width = 2700 * buttonScale
		buttonParam.height = 700 * buttonScale
		selfIn.createButton(buttonParam)
	end

	if not no_button_list['menu'] then
		buttonParam.click_function = 'flipSwapLF'
		if swapLF then buttonParam.label = 'x' else buttonParam.label = '' end
		buttonParam.position = {positionXscale * -7.5, positionY, (5.75 * positionZscale) + positionZoffset2}
		buttonParam.width = 300 * buttonScale
		buttonParam.height = 300 * buttonScale
		selfIn.createButton(buttonParam)
		buttonParam.label = 'Swap ' .. text.liberalLetter .. ' and ' .. text.fascistLetter
		buttonParam.position = {positionXscale * -4, positionY, (5.75 * positionZscale) + positionZoffset2}
		buttonParam.width = 2700 * buttonScale
		buttonParam.height = 700 * buttonScale
		selfIn.createButton(buttonParam)
	end

	if selfIn.name == 'Checker_Board' or selfIn.name == 'Go_Board' then
		buttonParam.click_function = 'flipColorMatch'
		if colorMatch then buttonParam.label = 'x' else buttonParam.label = '' end
		buttonParam.position = {positionXscale * -7.5, positionY, (7.25 * positionZscale) + positionZoffset2}
		buttonParam.width = 300 * buttonScale
		buttonParam.height = 300 * buttonScale
		selfIn.createButton(buttonParam)
		buttonParam.label = 'Color match'
		buttonParam.position = {positionXscale * -4, positionY, (7.25 * positionZscale) + positionZoffset2}
		buttonParam.width = 2700 * buttonScale
		buttonParam.height = 700 * buttonScale
		selfIn.createButton(buttonParam)
	elseif selfIn.name == 'backgammon_board' and Player[selfIn.getVar('playerNoteTaker')].admin then
		buttonParam.click_function = 'flipCooperative'
		if cooperative then buttonParam.label = 'x' else buttonParam.label = '' end
		buttonParam.position = {positionXscale * -7.5, positionY, (7.25 * positionZscale) + positionZoffset2}
		buttonParam.width = 300 * buttonScale
		buttonParam.height = 300 * buttonScale
		selfIn.createButton(buttonParam)
		buttonParam.label = 'Cooperative'
		buttonParam.position = {positionXscale * -4, positionY, (7.25 * positionZscale) + positionZoffset2}
		buttonParam.width = 2700 * buttonScale
		buttonParam.height = 700 * buttonScale
		selfIn.createButton(buttonParam)
	end

	buttonParam.click_function = 'shuffleDrawDeckButton'
	buttonParam.label = 'Shuffle'
	buttonParam.position = {positionXscale * 4, positionY, 1.25  * positionZscale + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'disableSecurityButton'
	buttonParam.label = 'Disable security'
	buttonParam.position = {positionXscale * 4, positionY, 2.75 * positionZscale + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'giveRoleCardsButton'
	buttonParam.label = 'Give role cards'
	buttonParam.position = {positionXscale * 4, positionY, 4.25 * positionZscale + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'forceVotePass'
	buttonParam.label = 'Vote Passed'
	buttonParam.position = {positionXscale * 4, positionY, 5.75 * positionZscale + positionZoffset2}
	selfIn.createButton(buttonParam)
end

function setupPlayer(clickedObject, playerIn)
	clickedObject.setVar('playerNoteTaker', playerIn)
	functionName = setupBoardGetFunction(playerIn) .. colorOffset[playerIn]
	startLuaCoroutine(clickedObject, 'spawnWaitDestructCoroutine')
end

function setupBoard(selfIn)
	if type(selfIn) == 'table' then
		selfIn = selfIn[1]
	end
	local playerNT = selfIn.getVar('playerNoteTaker')
	local imagename = setupBoardGetFunction(playerIn) .. colorOffset[playerNT]
	if no_button_list[functionName] then
		positionY = -0.1
	end
	if colorMatch then selfIn.setColorTint(stringColorToRGB(playerNT)) end
	forceObjectToPlayer(selfIn, playerNT, {forward = giveForward, right = rightOffset[playerNT], up = 0, forceHeight = giveHeight}, {x = rotationZ, y = 180 - rotationZ, z = 0})
	selfIn.setLock(true)
	if selfIn.name == 'backgammon_board' then
		local screen = getObjectFromGUID(privateScreenGUID)
		if screen then
			forceObjectToPlayer(screen, playerNT, {forward = giveForward + 12.5, right = rightOffset[playerNT], up = 0, forceHeight = 0.9}, {x = 0, y = 180 - rotationZ, z = 0})
			screen.setLock(true)
			refreshNotes(selfIn)
			startLuaCoroutine(selfIn, 'spawnFogCoroutine')
		else
			spawnScreen(selfIn)
			return
		end
	end
	local fName = setupBoardGetFunction(playerNT)
	_G[fName](selfIn, colorOffset[playerNT])
end

function setupBoardGetFunction(playerIn)
	if playerIn == 'Orange' or playerIn == 'Yellow' or playerIn == 'Purple' or playerIn == 'Pink' then
		return 'initVertical'
	else
		return 'initHorizontal'
	end
end

function setupMe(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		setupPlayer(clickedObject, playerColor)
	end
end

function setupWhite(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		setupPlayer(clickedObject, 'White')
	end
end

function setupBrown(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		setupPlayer(clickedObject, 'Brown')
	end
end

function setupRed(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		setupPlayer(clickedObject, 'Red')
	end
end

function setupOrange(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		setupPlayer(clickedObject, 'Orange')
	end
end

function setupYellow(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		setupPlayer(clickedObject, 'Yellow')
	end
end

function setupGreen(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		setupPlayer(clickedObject, 'Green')
	end
end

function setupTeal(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		setupPlayer(clickedObject, 'Teal')
	end
end

function setupBlue(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		setupPlayer(clickedObject, 'Blue')
	end
end

function setupPurple(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		setupPlayer(clickedObject, 'Purple')
	end
end

function setupPink(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		setupPlayer(clickedObject, 'Pink')
	end
end

function flipUseNames(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		useNames = not useNames
		refreshNotes(clickedObject)
		menu(clickedObject)
	end
end

function flipUseColor(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		useColor = not useColor
		refreshNotes(clickedObject)
		menu(clickedObject)
	end
end

function flipSwapLF(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		swapLF = not swapLF
		menu(clickedObject)
	end
end

function flipColorMatch(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		colorMatch = not colorMatch
		menu(clickedObject)
	end
end

function flipCooperative(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		cooperative = not cooperative
		menu(clickedObject)
	end
end

function flipMoveTracker(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		moveTracker = not moveTracker
		menu(clickedObject)
	end
end

function shuffleDrawDeckButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if not Global.call('shuffleDrawDeck') then
			broadcastToColor('ERROR: Failed to shuffle draw deck.', playerColor, {1,0,0})
		end
	end
end

function disableSecurityButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		Global.call('disableSecurity')
	end
end

function giveRoleCardsButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		Global.call('giveRoleCards')
	end
end

function forceVotePass(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		Global.setVar('votePassed', true)
		Global.setVar('blockDraw', false)
	end
end

function initHorizontal(selfIn, offset)
	local buttonParam = {rotation = {0, 0, rotationZ}, width = 1800 * buttonScale, height = 700 * buttonScale, font_size = 300 * fontScale}

	if sharedHistory then
		buttonParam.function_owner = Global
	else
		buttonParam.function_owner = self
	end

	-- Players
	local color = offset + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = main_playable_colors[color]
	buttonParam.label = main_playable_colors[color]
	buttonParam.position = {positionXscale * 4, positionY, (-2.25 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGB(main_playable_colors[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = main_playable_colors[color]
	buttonParam.label = main_playable_colors[color]
	buttonParam.position = {positionXscale * 0, positionY, (-2.25 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGB(main_playable_colors[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = main_playable_colors[color]
	buttonParam.label = main_playable_colors[color]
	buttonParam.position = {positionXscale * -4, positionY, (-2.25 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGB(main_playable_colors[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = main_playable_colors[color]
	buttonParam.label = main_playable_colors[color]
	buttonParam.position = {positionXscale * -6, positionY, (-3.75 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGB(main_playable_colors[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = main_playable_colors[color]
	buttonParam.label = main_playable_colors[color]
	buttonParam.position = {positionXscale * -6, positionY, (-5.25 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGB(main_playable_colors[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = main_playable_colors[color]
	buttonParam.label = main_playable_colors[color]
	buttonParam.position = {positionXscale * -4, positionY, (-6.75 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGB(main_playable_colors[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = main_playable_colors[color]
	buttonParam.label = main_playable_colors[color]
	buttonParam.position = {positionXscale * 0, positionY, (-6.75 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGB(main_playable_colors[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = main_playable_colors[color]
	buttonParam.label = main_playable_colors[color]
	buttonParam.position = {positionXscale * 4, positionY, (-6.75 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGB(main_playable_colors[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = main_playable_colors[color]
	buttonParam.label = main_playable_colors[color]
	buttonParam.position = {positionXscale * 6, positionY, (-5.25 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGB(main_playable_colors[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = main_playable_colors[color]
	buttonParam.label = main_playable_colors[color]
	buttonParam.position = {positionXscale * 6, positionY, (-3.75 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGB(main_playable_colors[color])
	selfIn.createButton(buttonParam)

	initCommon(selfIn)
end

function initVertical(selfIn, offset)
	local buttonParam = {rotation = {0, 0, rotationZ}, width = 1800 * buttonScale, height = 700 * buttonScale, font_size = 300 * fontScale}

	if sharedHistory then
		buttonParam.function_owner = Global
	else
		buttonParam.function_owner = self
	end

	-- Players
	local color = offset + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = main_playable_colors[color]
	buttonParam.label = main_playable_colors[color]
	buttonParam.position = {positionXscale * 6, positionY, (-6.0 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGB(main_playable_colors[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = main_playable_colors[color]
	buttonParam.label = main_playable_colors[color]
	buttonParam.position = {positionXscale * 6, positionY, (-4.5 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGB(main_playable_colors[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = main_playable_colors[color]
	buttonParam.label = main_playable_colors[color]
	buttonParam.position = {positionXscale * 6, positionY, (-3.0 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGB(main_playable_colors[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = main_playable_colors[color]
	buttonParam.label = main_playable_colors[color]
	buttonParam.position = {positionXscale * 2, positionY, (-2.25 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGB(main_playable_colors[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = main_playable_colors[color]
	buttonParam.label = main_playable_colors[color]
	buttonParam.position = {positionXscale * -2, positionY, (-2.25 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGB(main_playable_colors[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = main_playable_colors[color]
	buttonParam.label = main_playable_colors[color]
	buttonParam.position = {positionXscale * -6, positionY, (-3.0 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGB(main_playable_colors[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = main_playable_colors[color]
	buttonParam.label = main_playable_colors[color]
	buttonParam.position = {positionXscale * -6, positionY, (-4.5 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGB(main_playable_colors[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = main_playable_colors[color]
	buttonParam.label = main_playable_colors[color]
	buttonParam.position = {positionXscale * -6, positionY, (-6.0 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGB(main_playable_colors[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = main_playable_colors[color]
	buttonParam.label = main_playable_colors[color]
	buttonParam.position = {positionXscale * -2, positionY, (-6.75 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGB(main_playable_colors[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = main_playable_colors[color]
	buttonParam.label = main_playable_colors[color]
	buttonParam.position = {positionXscale * 2, positionY, (-6.75 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGB(main_playable_colors[color])
	selfIn.createButton(buttonParam)

	initCommon(selfIn)
end

function initCommon(selfIn)
	local buttonParam = {rotation = {0, 0, rotationZ}, font_size = 300 * fontScale}
	local bulletInfo = Global.getTable('bulletInfo')
	local text = Global.getTable('text')

	if sharedHistory then
		buttonParam.function_owner = Global
	else
		buttonParam.function_owner = self
	end

	-- Info
	if selfIn.name == 'backgammon_board' then
		local screen = getObjectFromGUID(privateScreenGUID)
		if screen then
			screen.setName('Private Notes')
		end
	end

	-- Settings
	buttonParam.click_function = 'menuButton'
	buttonParam.label = menu_unicode
	buttonParam.width = 600 * buttonScale
	buttonParam.height = 500 * buttonScale
	if selfIn.name == 'backgammon_board' then
		buttonParam.position = {positionXscale * 7.4, positionY, (-16.3 * positionZscale) + positionZoffset2}
	else
		buttonParam.position = {positionXscale * 7.6, positionY, (-7.5 * positionZscale) + positionZoffset2}
	end
	selfIn.createButton(buttonParam)

	-- Post/Retrieve
	if selfIn.name == 'backgammon_board' and cooperative then
		buttonParam.click_function = 'postButton'
		buttonParam.label = 'Post'
		buttonParam.width = 1500 * buttonScale
		buttonParam.position = {positionXscale * -6.25, positionY, (-16.3 * positionZscale) + positionZoffset2}
		selfIn.createButton(buttonParam)

		buttonParam.click_function = 'retrieveButton'
		buttonParam.label = 'Retrieve'
		buttonParam.position = {positionXscale * 5, positionY, (-16.3 * positionZscale) + positionZoffset2}
		selfIn.createButton(buttonParam)
	end

	-- Center
	buttonParam.click_function = 'autoButton'
	buttonParam.label = 'Auto Gov'
	buttonParam.height = 700 * buttonScale
	if Player[selfIn.getVar('playerNoteTaker')].admin or selfIn.name ~= 'backgammon_board' then
		buttonParam.width = 1800 * buttonScale
		buttonParam.position = {positionXscale * -2, positionY, (-5.25 * positionZscale) + positionZoffset1}
		selfIn.createButton(buttonParam)

		buttonParam.click_function = 'setPreviousPlacs'
		buttonParam.label = 'Move Prev'
		buttonParam.position = {positionXscale * 2, positionY, (-5.25 * positionZscale) + positionZoffset1}
		selfIn.createButton(buttonParam)
	else
		buttonParam.width = 3700 * buttonScale
		buttonParam.position = {positionXscale * 0, positionY, (-5.25 * positionZscale) + positionZoffset1}
		selfIn.createButton(buttonParam)
	end

	buttonParam.click_function = 'downvotedButton'
	buttonParam.label = 'Downvoted'
	buttonParam.width = 3700 * buttonScale
	buttonParam.position = {positionXscale * 0, positionY, (-3.75 * positionZscale) + positionZoffset1}
	selfIn.createButton(buttonParam)

	-- Left
	buttonParam.click_function = 'examinesButton'
	buttonParam.label = 'Ex Deck'
	buttonParam.width = 1500 * buttonScale
	buttonParam.height = 700 * buttonScale
	buttonParam.position = {positionXscale * -6.5, positionY, (-0.25 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'conflictButton'
	buttonParam.label = 'Conflict'
	buttonParam.position = {positionXscale * -6.5, positionY, (1.25 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'reshuffleButton'
	buttonParam.label = 'Reshuffle'
	buttonParam.position = {positionXscale * -6.5, positionY, (2.75 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'hZoneButton'
	buttonParam.label = string.sub(text.hitler, 1, 1) .. ' Zone'
	buttonParam.position = {positionXscale * -6.5, positionY, (4.25 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'topdeckButton'
	buttonParam.label = 'Topdeck'
	buttonParam.position = {positionXscale * -6.5, positionY, (5.75 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'revisedButton'
	buttonParam.label = 'Revised'
	buttonParam.position = {positionXscale * -6.5, positionY, (7.25 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	-- Right
	buttonParam.click_function = 'deleteLineButton'
	buttonParam.label = 'Delete Line'
	buttonParam.position = {positionXscale * 6.5, positionY, (-0.25 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'insertLineButton'
	buttonParam.label = 'Insert Line'
	buttonParam.position = {positionXscale * 6.5, positionY, (1.25 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'topButton'
	buttonParam.label = 'Top'
	buttonParam.position = {positionXscale * 6.5, positionY, (2.75 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'bottomButton'
	buttonParam.label = 'Bottom'
	buttonParam.position = {positionXscale * 6.5, positionY, (4.25 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'upButton'
	buttonParam.label = up_unicode
	buttonParam.width = 700 * buttonScale
	buttonParam.position = {positionXscale * 5.75, positionY, (5.75 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'rightButton'
	buttonParam.label = right_unicode
	buttonParam.position = {positionXscale * 7.25, positionY, (6.5 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'downButton'
	buttonParam.label = down_unicode
	buttonParam.position = {positionXscale * 5.75, positionY, (7.25 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'leftButton'
	buttonParam.label = left_unicode
	buttonParam.position = {positionXscale * 4.25, positionY, (6.5 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	-- Policy x3
	buttonParam.click_function = 'QQQ'
	buttonParam.label = '???'
	buttonParam.position = {positionXscale * 3.8, positionY, (2.75 * positionZscale) + positionZoffset2}
	buttonParam.width = 900 * buttonScale
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'FFF'
	buttonParam.label = text.fascistLetter .. text.fascistLetter .. text.fascistLetter
	if swapLF then
		buttonParam.position = {positionXscale * -3.8, positionY, (2.75 * positionZscale) + positionZoffset2}
	else
		buttonParam.position = {positionXscale * 1.9, positionY, (2.75 * positionZscale) + positionZoffset2}
	end
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'FFL'
	buttonParam.label = text.fascistLetter .. text.fascistLetter .. text.liberalLetter
	if swapLF then
		buttonParam.position = {positionXscale * -1.9, positionY, (2.75 * positionZscale) + positionZoffset2}
	else
		buttonParam.position = {positionXscale * 0.0, positionY, (2.75 * positionZscale) + positionZoffset2}
	end
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'FLL'
	buttonParam.label = text.fascistLetter .. text.liberalLetter .. text.liberalLetter
	if swapLF then
		buttonParam.position = {positionXscale * 0.0, positionY, (2.75 * positionZscale) + positionZoffset2}
	else
		buttonParam.position = {positionXscale * -1.9, positionY, (2.75 * positionZscale) + positionZoffset2}
	end
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'LLL'
	buttonParam.label = text.liberalLetter .. text.liberalLetter .. text.liberalLetter
	if swapLF then
		buttonParam.position = {positionXscale * 1.9, positionY, (2.75 * positionZscale) + positionZoffset2}
	else
		buttonParam.position = {positionXscale * -3.8, positionY, (2.75 * positionZscale) + positionZoffset2}
	end
	selfIn.createButton(buttonParam)

	-- Policy x2
	buttonParam.click_function = 'QQ'
	buttonParam.label = '??'
	buttonParam.position = {positionXscale * 2.85, positionY, (4.25 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'FF'
	buttonParam.label = text.fascistLetter .. text.fascistLetter
	if swapLF then
		buttonParam.position = {positionXscale * -2.85, positionY, (4.25 * positionZscale) + positionZoffset2}
	else
		buttonParam.position = {positionXscale * 0.95, positionY, (4.25 * positionZscale) + positionZoffset2}
	end
	selfIn.createButton(buttonParam)

	-- same if swapLF
	buttonParam.click_function = 'FL'
	buttonParam.label = text.fascistLetter .. text.liberalLetter
	buttonParam.position = {positionXscale * -0.95, positionY, (4.25 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'LL'
	buttonParam.label = text.liberalLetter .. text.liberalLetter
	if swapLF then
		buttonParam.position = {positionXscale * 0.95, positionY, (4.25 * positionZscale) + positionZoffset2}
	else
		buttonParam.position = {positionXscale * -2.85, positionY, (4.25 * positionZscale) + positionZoffset2}
	end
	selfIn.createButton(buttonParam)

	-- Policy final
	buttonParam.click_function = 'vetoButton'
	buttonParam.label = 'Veto'
	buttonParam.position = {positionXscale * 1.9, positionY, (5.75 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'F'
	buttonParam.label = text.fascistLetter
	if swapLF then
		buttonParam.position = {positionXscale * -1.9, positionY, (5.75 * positionZscale) + positionZoffset2}
	else
		buttonParam.position =  {positionXscale * 0.0, positionY, (5.75 * positionZscale) + positionZoffset2}
	end
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'L'
	buttonParam.label = text.liberalLetter
	if swapLF then
		buttonParam.position = {positionXscale * 0.0, positionY, (5.75 * positionZscale) + positionZoffset2}
	else
		buttonParam.position = {positionXscale * -1.9, positionY, (5.75 * positionZscale) + positionZoffset2}
	end
	selfIn.createButton(buttonParam)

	-- Power buttons
	buttonParam.click_function = 'investigate'
	buttonParam.label = 'Investigates'
	buttonParam.position = {positionXscale * -2.9, positionY, (-0.25 * positionZscale) + positionZoffset2}
	buttonParam.width = 1800 * buttonScale
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'givesTo'
	buttonParam.label = 'Gives to'
	buttonParam.position = {positionXscale * 0.5, positionY, (-0.25 * positionZscale) + positionZoffset2}
	buttonParam.width = 1400 * buttonScale
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'shoots'
	buttonParam.label = bulletInfo.action
	buttonParam.position = {positionXscale * 3.4, positionY, (-0.25 * positionZscale) + positionZoffset2}
	buttonParam.width = 1300 * buttonScale
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'liberal'
	buttonParam.label = text.liberalAbbr
	buttonParam.width = 1500 * buttonScale
	if swapLF then
		buttonParam.position = {positionXscale * 0.0, positionY, (1.25 * positionZscale) + positionZoffset2}
	else
		buttonParam.position = {positionXscale * -3.2, positionY, (1.25 * positionZscale) + positionZoffset2}
	end
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'fascist'
	buttonParam.label = text.fascistAbbr
	if swapLF then
		buttonParam.position = {positionXscale * -3.2, positionY, (1.25 * positionZscale) + positionZoffset2}
	else
		buttonParam.position = {positionXscale * 0.0, positionY, (1.25 * positionZscale) + positionZoffset2}
	end
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'noComment'
	buttonParam.label = 'Nothing'
	buttonParam.position = {positionXscale * 3.20, positionY, (1.25 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	-- Bottom
	buttonParam.click_function = 'exDiscardButton'
	buttonParam.label = 'Ex Discard'
	buttonParam.width = 1300 * buttonScale
	buttonParam.position = {positionXscale * -3.4, positionY, (7.25 * positionZscale) + positionZoffset2}
	buttonParam.font_size = 250
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'discardsButton'
	buttonParam.label = 'Discards'
	buttonParam.position = {positionXscale * -0.65, positionY, (7.25 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'addsButton'
	buttonParam.label = 'Adds to\nDeck'
	buttonParam.position = {positionXscale * 2.1, positionY, (7.25 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

end

function spawnScreen(selfIn)
	local params = {}
	params.type = 'Notecard'
	params.scale = {3.79999614, 3.79999614, 3.79999614}
	params.position = {-100, 100, -100}
	params.callback = 'spawnScreenCallback'
	params.callback_owner = selfIn
	spawnObject(params)
end

function spawnScreenCallback(objIn, paramsIn)
	privateScreenGUID = objIn.getGUID()
	refreshNotes(self)
	if playerNoteTaker and not (playerNoteTaker == '') then
		if forceMenu then
			forceMenu = false
			menu(self)
		else
			setupBoard(self)
		end
	else
		menu(self)
	end
end

function spawnFogCoroutine()
	local screen = getObjectFromGUID(privateScreenGUID)
	if screen then
		if privateFogGUID ~= hidden_zone_guids[playerNoteTaker] then
			destroyObjectByGUID(privateFogGUID)
		end
		local secretZone = getObjectFromGUID(hidden_zone_guids[playerNoteTaker])
		local params = {}
		params.position = {-100, 100, -100}
		local fog
		if secretZone then
			fog = secretZone.clone(params) -- only way I know to set the color
		else
			params.type = 'FogOfWarTrigger'
			fog = spawnObject(params)
		end
		wait(5)
		fog.setPosition(screen.getPosition())
		fog.setRotation(screen.getRotation())
		fog.setScale({26.2, 3.5, 15.8})
		privateFogGUID = fog.getGUID()
	end

	return true
end

function postButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor then
		if nextPost == nil or nextPost < os.clock() then
			nextPost = os.clock() + 30
			Global.setTable('noteTakerNotes', noteTakerNotes)
			Global.setVar('noteTakerCurrLine', noteTakerCurrLine)
			local options = Global.getTable('options')
			if options.scriptedVoting then
				local notesString = noteTakerNotesString(19, false, true)
				Global.setVar('mainNotes', notesString)
				setNotes(Global.getVar('voteNotes') .. '\n\n' .. notesString)
			else
				local notesString = noteTakerNotesString(25, false, true)
				setNotes(notesString)
			end
		else
			broadcastToColor('You can only post once every 30 seconds.', playerNoteTaker, {1, 0, 0})
		end
	end
end

function retrieveButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor then
		noteTakerNotes = Global.getTable('noteTakerNotes')
		noteTakerCurrLine = Global.getVar('noteTakerCurrLine')
		if not noteTakerCurrLine or noteTakerCurrLine == 0 then
			noteTakerNotes = {}
			noteTakerCurrLine = 0
			addNewLine()
		end
		refreshNotes(clickedObject)
	end
end

function addNewLine()
	noteTakerCurrLine = noteTakerCurrLine + 1
	if noteTakerCurrLine > #noteTakerNotes then
		table.insert(noteTakerNotes, defaultLine())
	end
	editMode = true
end

function refreshNotes(selfIn)
	local tempNotes = noteTakerNotesString(maxLines, true, useColor)

	if selfIn and selfIn.name == 'backgammon_board' then
		tempNotes = string.gsub(tempNotes, stringColorToHex('White') .. ']', textColorReplace)
		local screen = getObjectFromGUID(privateScreenGUID)
		if screen then -- save the long version by not using noteTakerSetNotes
			screen.setDescription(tempNotes)
		end
	else
		noteTakerSetNotes(tempNotes)
	end
end

function buttonColor(clickedObject, playerColor, colorClicked)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		local bulletInfo = Global.getTable('bulletInfo')
		if noteTakerNotes[noteTakerCurrLine].color1 == '' or not editMode then
			noteTakerNotes[noteTakerCurrLine].color1 = colorClicked
			noteTakerNotes[noteTakerCurrLine].action = '>'
			prevPresColor = colorClicked
		else
			noteTakerNotes[noteTakerCurrLine].color2 = colorClicked
			prevChanColor = colorClicked
		end
		if (noteTakerNotes[noteTakerCurrLine].action == string.lower(bulletInfo.action) or noteTakerNotes[noteTakerCurrLine].action == 'gives pres to')
			 and noteTakerNotes[noteTakerCurrLine].color1 ~= '' and noteTakerNotes[noteTakerCurrLine].color2 ~= '' then
			addNewLine()
		end
		refreshNotes(clickedObject)
	end
end

function White(clickedObject, playerColor)
	buttonColor(clickedObject, playerColor, 'White')
end

function Brown(clickedObject, playerColor)
	buttonColor(clickedObject, playerColor, 'Brown')
end

function Red(clickedObject, playerColor)
	buttonColor(clickedObject, playerColor, 'Red')
end

function Orange(clickedObject, playerColor)
	buttonColor(clickedObject, playerColor, 'Orange')
end

function Yellow(clickedObject, playerColor)
	buttonColor(clickedObject, playerColor, 'Yellow')
end

function Green(clickedObject, playerColor)
	buttonColor(clickedObject, playerColor, 'Green')
end

function Teal(clickedObject, playerColor)
	buttonColor(clickedObject, playerColor, 'Teal')
end

function Blue(clickedObject, playerColor)
	buttonColor(clickedObject, playerColor, 'Blue')
end

function Purple(clickedObject, playerColor)
	buttonColor(clickedObject, playerColor, 'Purple')
end

function Pink(clickedObject, playerColor)
	buttonColor(clickedObject, playerColor, 'Pink')
end

-- Top
function autoButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		local tempObj = getObjectFromGUID(president_guid)
		local pres = closestPlayer(tempObj, main_playable_colors, 1000)
		tempObj = getObjectFromGUID(chancelor_guid)
		local chan = closestPlayer(tempObj, main_playable_colors, 1000)

		if pres then
			noteTakerNotes[noteTakerCurrLine].color1 = pres
			noteTakerNotes[noteTakerCurrLine].action = '>'
			prevPresColor = pres
		end
		if chan then
			noteTakerNotes[noteTakerCurrLine].color2 = chan
			noteTakerNotes[noteTakerCurrLine].action = '>'
			prevChanColor = chan
		end
		refreshNotes(clickedObject)
	end
end

function setPreviousPlacs(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if prevPresColor and prevChanColor then
			local tmpPres = getObjectFromGUID(prev_president_guid)
			if tmpPres then giveObjectToPlayer(tmpPres, prevPresColor, {forward = prevForward, right = 0, up = 0, forceHeight = 1.1}, no_rotation, false, true) end
			local tmpChan = getObjectFromGUID(prev_chancelor_guid)
			if tmpChan then giveObjectToPlayer(tmpChan, prevChanColor, {forward = prevForward, right = 0, up = 0, forceHeight = 1.1}, no_rotation, false, true) end
		end
	end
end

function downvotedButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		noteTakerNotes[noteTakerCurrLine].result = '[222222]Downvoted[-]'
		noteTakerNotes[noteTakerCurrLine].action = '>'
		noteTakerNotes[noteTakerCurrLine].claim3 = ''
		noteTakerNotes[noteTakerCurrLine].claim2 = ''
		noteTakerNotes[noteTakerCurrLine].claim1 = ''
		addNewLine()
		refreshNotes(clickedObject)
		incTracker()
	end
end

-- Left
function examinesButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if noteTakerNotes[noteTakerCurrLine].action == 'examines deck:' then
			noteTakerNotes[noteTakerCurrLine].action = '>'
		else
			noteTakerNotes[noteTakerCurrLine].action = 'examines deck:'
			noteTakerNotes[noteTakerCurrLine].color2 = ''
		end
		if noteTakerNotes[noteTakerCurrLine].result ~= '' then
			addNewLine()
		end
		refreshNotes(clickedObject)
	end
end

function conflictButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if noteTakerConflict(noteTakerCurrLine) then
			noteTakerNotes[noteTakerCurrLine].conflict = ''
			noteTakerNotes[noteTakerCurrLine].claim2 = ''
		else
			noteTakerNotes[noteTakerCurrLine].conflict = '(Conflict)'
		end
		refreshNotes(clickedObject)
	end
end

function reshuffleButton(clickedObject, playerColor)
	resultOnly(clickedObject, playerColor, '*Reshuffle*')
end

function hZoneButton(clickedObject, playerColor)
	local text = Global.getTable('text')
	resultOnly(clickedObject, playerColor, '[FF0000]' .. text.hitler .. ' territory![-]')
end

function resultOnly(clickedObject, playerColor, text)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if noteTakerNotes[noteTakerCurrLine].result == text then
			noteTakerNotes[noteTakerCurrLine].result = ''
		else
			noteTakerNotes[noteTakerCurrLine].conflict = ''
			noteTakerNotes[noteTakerCurrLine].color1 = ''
			noteTakerNotes[noteTakerCurrLine].action = ''
			noteTakerNotes[noteTakerCurrLine].color2 = ''
			noteTakerNotes[noteTakerCurrLine].claim3 = ''
			noteTakerNotes[noteTakerCurrLine].claim2 = ''
			noteTakerNotes[noteTakerCurrLine].claim1 = ''
			noteTakerNotes[noteTakerCurrLine].result = text
			addNewLine()
		end
		refreshNotes(clickedObject)
	end
end

function topdeckButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if noteTakerNotes[noteTakerCurrLine].action == 'Topdeck:' then
			noteTakerNotes[noteTakerCurrLine].action = ''
		else
			noteTakerNotes[noteTakerCurrLine].conflict = ''
			noteTakerNotes[noteTakerCurrLine].color1 = ''
			noteTakerNotes[noteTakerCurrLine].action = 'Topdeck:'
			noteTakerNotes[noteTakerCurrLine].color2 = ''
			noteTakerNotes[noteTakerCurrLine].claim3 = ''
			noteTakerNotes[noteTakerCurrLine].claim2 = ''
			noteTakerNotes[noteTakerCurrLine].claim1 = ''
			if noteTakerNotes[noteTakerCurrLine].result ~= '' then
				addNewLine()
			end
		end
		refreshNotes(clickedObject)
	end
end

function revisedButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if noteTakerConflict(noteTakerCurrLine) then
			if noteTakerNotes[noteTakerCurrLine].conflict == '(Rev Con)' then
				noteTakerNotes[noteTakerCurrLine].conflict = '(Conflict)'
			else
				noteTakerNotes[noteTakerCurrLine].conflict = '(Rev Con)'
			end
		elseif noteTakerNotes[noteTakerCurrLine].conflict == '(Rev)' then
			noteTakerNotes[noteTakerCurrLine].conflict = ''
		else
			noteTakerNotes[noteTakerCurrLine].conflict = '(Rev)'
		end
		refreshNotes(clickedObject)
	end
end

-- Right
function deleteLineButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if noteTakerCurrLine == #noteTakerNotes then
			table.remove(noteTakerNotes, noteTakerCurrLine)
			noteTakerCurrLine = noteTakerCurrLine - 1
			addNewLine()
		else
			table.remove(noteTakerNotes, noteTakerCurrLine)
		end
		refreshNotes(clickedObject)
	end
end

function insertLineButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		table.insert(noteTakerNotes, noteTakerCurrLine, defaultLine())
		refreshNotes(clickedObject)
	end
end

function topButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		noteTakerCurrLine = 1
		refreshNotes(clickedObject)
		editMode = true
	end
end

function bottomButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		noteTakerCurrLine = #noteTakerNotes
		refreshNotes(clickedObject)
		editMode = true
	end
end

function upButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if noteTakerCurrLine - 1 > 0 then
			noteTakerCurrLine = noteTakerCurrLine - 1
		end
		editMode = true
		refreshNotes(clickedObject)
		if noteTakerNotes[noteTakerCurrLine].color1 ~= '' then
			prevPresColor = noteTakerNotes[noteTakerCurrLine].color1
		end
		if noteTakerNotes[noteTakerCurrLine].color2 ~= '' then
			prevChanColor = noteTakerNotes[noteTakerCurrLine].color2
		end
	end
end

function downButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		addNewLine()
		editMode = true
		refreshNotes(clickedObject)
		if noteTakerNotes[noteTakerCurrLine].color1 ~= '' then
			prevPresColor = noteTakerNotes[noteTakerCurrLine].color1
		end
		if noteTakerNotes[noteTakerCurrLine].color2 ~= '' then
			prevChanColor = noteTakerNotes[noteTakerCurrLine].color2
		end
	end
end

function rightButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		editMode = true
		refreshNotes(clickedObject)
	end
end

function leftButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		editMode = false
		refreshNotes(clickedObject)
	end
end

-- Center
function investigate(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if noteTakerNotes[noteTakerCurrLine].action == 'inspects' then
			noteTakerNotes[noteTakerCurrLine].action = '>'
		else
			noteTakerNotes[noteTakerCurrLine].action = 'inspects'
		end
		if noteTakerNotes[noteTakerCurrLine].color1 ~= ''
			and noteTakerNotes[noteTakerCurrLine].color2 ~= ''
			and noteTakerNotes[noteTakerCurrLine].result ~= '' then
			addNewLine()
		end
		refreshNotes(clickedObject)
	end
end

function givesTo(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if noteTakerNotes[noteTakerCurrLine].action == 'gives pres to' then
			noteTakerNotes[noteTakerCurrLine].action = '>'
		else
			noteTakerNotes[noteTakerCurrLine].action = 'gives pres to'
		end
		if noteTakerNotes[noteTakerCurrLine].color1 ~= ''
			and noteTakerNotes[noteTakerCurrLine].color2 ~= '' then
			addNewLine()
		end
		refreshNotes(clickedObject)
	end
end

function shoots(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		local bulletInfo = Global.getTable('bulletInfo')
		if noteTakerNotes[noteTakerCurrLine].action == string.lower(bulletInfo.action) then
			noteTakerNotes[noteTakerCurrLine].action = '>'
		else
			noteTakerNotes[noteTakerCurrLine].action = string.lower(bulletInfo.action)
		end
		if noteTakerNotes[noteTakerCurrLine].color1 ~= ''
			and noteTakerNotes[noteTakerCurrLine].color2 ~= '' then
			addNewLine()
		end
		refreshNotes(clickedObject)
	end
end

function liberal(clickedObject, playerColor)
	local text = Global.getTable('text')
	resultText(clickedObject, playerColor, 'claims [0080F8]' .. text.liberalAbbr .. '[-]')
end

function fascist(clickedObject, playerColor)
	local text = Global.getTable('text')
	resultText(clickedObject, playerColor, 'claims [FF0000]' .. text.fascistAbbr .. '[-]')
end

function noComment(clickedObject, playerColor)
	resultText(clickedObject, playerColor, 'says [i]Nothing[/i]')
end

function resultText(clickedObject, playerColor, text)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if noteTakerNotes[noteTakerCurrLine].result == text then
			noteTakerNotes[noteTakerCurrLine].result = ''
		else
			noteTakerNotes[noteTakerCurrLine].result = text
			addNewLine()
		end
		refreshNotes(clickedObject)
	end
end

function LLL(clickedObject, playerColor)
	local text = Global.getTable('text')
	XXX(clickedObject, playerColor, '[0080F8]' .. text.liberalLetter .. text.liberalLetter .. text.liberalLetter .. '[-]')
end

function FLL(clickedObject, playerColor)
	local text = Global.getTable('text')
	XXX(clickedObject, playerColor, '[FF0000]' .. text.fascistLetter .. '[-][0080F8]' .. text.liberalLetter .. text.liberalLetter .. '[-]')
end

function FFL(clickedObject, playerColor)
	local text = Global.getTable('text')
	XXX(clickedObject, playerColor, '[FF0000]' .. text.fascistLetter .. text.fascistLetter .. '[-][0080F8]' .. text.liberalLetter .. '[-]')
end

function FFF(clickedObject, playerColor)
	local text = Global.getTable('text')
	XXX(clickedObject, playerColor, '[FF0000]' .. text.fascistLetter .. text.fascistLetter .. text.fascistLetter .. '[-]')
end

function QQQ(clickedObject, playerColor)
	XXX(clickedObject, playerColor, '???')
end

function XXX(clickedObject, playerColor, text)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if noteTakerNotes[noteTakerCurrLine].action == 'examines deck:' then
			if noteTakerNotes[noteTakerCurrLine].result == text then
				noteTakerNotes[noteTakerCurrLine].result = ''
			else
				noteTakerNotes[noteTakerCurrLine].result = text
				addNewLine()
			end
		else
			if noteTakerNotes[noteTakerCurrLine].claim3 == text then
				noteTakerNotes[noteTakerCurrLine].claim3 = ''
			else
				noteTakerNotes[noteTakerCurrLine].claim3 = text
				if noteTakerNotes[noteTakerCurrLine].claim1 ~= ''
						and noteTakerNotes[noteTakerCurrLine].result ~= ''
						and noteTakerCurrLine == #noteTakerNotes then
					addNewLine()
				end
			end
		end
		refreshNotes(clickedObject)
	end
end

function LL(clickedObject, playerColor)
	local text = Global.getTable('text')
	XX(clickedObject, playerColor, '[0080F8]' .. text.liberalLetter .. text.liberalLetter .. '[-]')
end

function FL(clickedObject, playerColor)
	local text = Global.getTable('text')
	XX(clickedObject, playerColor, '[FF0000]' .. text.fascistLetter .. '[-][0080F8]' .. text.liberalLetter .. '[-]')
end

function FF(clickedObject, playerColor)
	local text = Global.getTable('text')
	XX(clickedObject, playerColor, '[FF0000]' .. text.fascistLetter .. text.fascistLetter .. '[-]')
end

function QQ(clickedObject, playerColor)
	XX(clickedObject, playerColor, '??')
end

function XX(clickedObject, playerColor, text)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if not editMode or (noteTakerNotes[noteTakerCurrLine].claim2 == ''
			and noteTakerConflict(noteTakerCurrLine)) then
			if noteTakerNotes[noteTakerCurrLine].claim2 == text then
				noteTakerNotes[noteTakerCurrLine].claim2 = ''
			else
				noteTakerNotes[noteTakerCurrLine].claim2 = text
			end
		else
			if noteTakerNotes[noteTakerCurrLine].claim1 == text then
				noteTakerNotes[noteTakerCurrLine].claim1 = ''
			else
				noteTakerNotes[noteTakerCurrLine].claim1 = text
			end
		end
		refreshNotes(clickedObject)
	end
end

function L(clickedObject, playerColor)
	local text = Global.getTable('text')
	X(clickedObject, playerColor, '[0080F8]' .. text.liberalLetter .. '[-]')
end

function F(clickedObject, playerColor)
	local text = Global.getTable('text')
	X(clickedObject, playerColor, '[FF0000]' .. text.fascistLetter .. '[-]')
end

function X(clickedObject, playerColor, text)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if noteTakerNotes[noteTakerCurrLine].result == text then
			noteTakerNotes[noteTakerCurrLine].result = ''
		else
			noteTakerNotes[noteTakerCurrLine].result = text
			if noteTakerCurrLine == #noteTakerNotes and
				((noteTakerNotes[noteTakerCurrLine].claim1 ~= ''
				  and noteTakerNotes[noteTakerCurrLine].claim3 ~= '')
				 or noteTakerNotes[noteTakerCurrLine].action == 'Topdeck:'
				 or noteTakerNotes[noteTakerCurrLine].action == 'examines deck:') then
				addNewLine()
			end
			resetTracker()
		end
		refreshNotes(clickedObject)
	end
end

function vetoButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		noteTakerNotes[noteTakerCurrLine].result = 'Veto!'
		addNewLine()
		refreshNotes(clickedObject)
		incTracker()
	end
end

--Bottom
function exDiscardButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if noteTakerNotes[noteTakerCurrLine].action == 'examines discard:' then
			noteTakerNotes[noteTakerCurrLine].action = '>'
		else
			noteTakerNotes[noteTakerCurrLine].action = 'examines discard:'
			noteTakerNotes[noteTakerCurrLine].color2 = ''
		end
		if noteTakerNotes[noteTakerCurrLine].result ~= '' then
			addNewLine()
		end
		refreshNotes(clickedObject)
	end
end

function discardsButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if noteTakerNotes[noteTakerCurrLine].action == 'discards:' then
			noteTakerNotes[noteTakerCurrLine].action = '>'
		else
			noteTakerNotes[noteTakerCurrLine].action = 'discards:'
			noteTakerNotes[noteTakerCurrLine].color2 = ''
		end
		if noteTakerNotes[noteTakerCurrLine].result ~= '' then
			addNewLine()
		end
		refreshNotes(clickedObject)
	end
end

function addsButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if noteTakerNotes[noteTakerCurrLine].action == 'adds to deck:' then
			noteTakerNotes[noteTakerCurrLine].action = '>'
		else
			noteTakerNotes[noteTakerCurrLine].action = 'adds to deck:'
			noteTakerNotes[noteTakerCurrLine].color2 = ''
		end
		if noteTakerNotes[noteTakerCurrLine].result ~= '' then
			addNewLine()
		end
		refreshNotes(clickedObject)
	end
end

function incTracker()
	local tracker = getObjectFromGUID(election_tracker_guid)
	if moveTracker and tracker then
		tracker.translate({electionTrackerMoveX, 0, 0})
	end
end

function resetTracker()
	local tracker = getObjectFromGUID(election_tracker_guid)
	if moveTracker and tracker then
		tracker.setPositionSmooth(electionTrackerOrgPos)
		tracker.setRotationSmooth({0, 315, 0})
	end
end

function defaultLine()
	return {conflict = '', color1 = '', action = '', color2 = '', claim3 = '', claim2 = '', claim1 = '', result = ''}
end

function noteTakerNotesString(maxLinesIn, showArrow, useColorIn)
	local stringOut = ''
	local startLine = 1
	local lastLine = #noteTakerNotes

	if maxLinesIn < #noteTakerNotes then
		startLine = #noteTakerNotes - maxLinesIn + 1
	end
	if startLine > noteTakerCurrLine then
		startLine = noteTakerCurrLine
		lastLine = startLine + maxLinesIn - 1
		if lastLine > #noteTakerNotes then
			lastLine = #noteTakerNotes
		end
	end

	for i = startLine, lastLine, 1 do
		if noteTakerCurrLine == i and showArrow then
			if editMode then
				stringOut = stringOut .. right_unicode .. ' '
			else
				stringOut = stringOut .. left_unicode .. ' '
			end
		end
		stringOut = stringOut .. noteTakerNotesLine(i, useColorIn)
	end

	if not useColorIn then
		stringOut = string.gsub(stringOut, '0080F8]', textColorReplace) -- Liberal color
		stringOut = string.gsub(stringOut, 'FF0000]', textColorReplace) -- Fascist color
		stringOut = string.gsub(stringOut, '222222]', textColorReplace) -- Downvote color
	end

	return stringOut
end

function noteTakerNotesLine(lineIn, useColorIn)
	local bulletInfo = Global.getTable('bulletInfo')
	local stringOut = ''

	if noteTakerNotes[lineIn].conflict ~= '' then
		stringOut = stringOut .. noteTakerNotes[lineIn].conflict .. ' '
	end
	if noteTakerNotes[lineIn].color1 ~= '' then
		local player = Player[noteTakerNotes[lineIn].color1]
		local text = noteTakerNotes[lineIn].color1
		if player.steam_name and useNames then
			text = string.sub(player.steam_name, 1, 7)
		end
		if useColorIn then
			text = '[' .. stringColorToHex(noteTakerNotes[lineIn].color1) .. ']' .. text .. '[-]'
		end
		stringOut = stringOut .. '[i]' .. text .. '[/i]' .. ' '
	end
	if noteTakerNotes[lineIn].action ~= '' then
		stringOut = stringOut .. noteTakerNotes[lineIn].action .. ' '
	end
	if noteTakerNotes[lineIn].color2 ~= '' then
		local player = Player[noteTakerNotes[lineIn].color2]
		local text = noteTakerNotes[lineIn].color2
		if player.steam_name and useNames then
			text = string.sub(player.steam_name, 1, 7)
		end
		if useColorIn then
			text = '[' .. stringColorToHex(noteTakerNotes[lineIn].color2) .. ']' .. text .. '[-]'
		end
		stringOut = stringOut .. '[i]' .. text .. '[/i]'
		if noteTakerNotes[lineIn].action ~= 'gives pres to'
			and noteTakerNotes[lineIn].action ~= string.lower(bulletInfo.action) then
			stringOut = stringOut .. ': '
		elseif noteTakerNotes[lineIn].claim3 ~= ''
				or noteTakerNotes[lineIn].claim2 ~= ''
				or noteTakerNotes[lineIn].claim1 ~= ''
				or noteTakerNotes[lineIn].result ~= '' then
			stringOut = stringOut .. ' '
		end
	end
	if noteTakerNotes[lineIn].claim3 ~= '' then
		stringOut = stringOut .. noteTakerNotes[lineIn].claim3 .. ' > '
	end
	if noteTakerNotes[lineIn].claim2 ~= '' then
		stringOut = stringOut .. noteTakerNotes[lineIn].claim2 .. ' > '
	end
	if noteTakerNotes[lineIn].claim1 ~= '' then
		stringOut = stringOut .. noteTakerNotes[lineIn].claim1 .. ' > '
	end
	if noteTakerNotes[lineIn].result ~= '' then
		stringOut = stringOut .. noteTakerNotes[lineIn].result
	end
	stringOut = stringOut .. '\n'

	return stringOut
end

function noteTakerConflict(currLineIn)
	if noteTakerNotes[currLineIn].conflict == '(Conflict)' then
		return true
	elseif noteTakerNotes[currLineIn].conflict == '(Rev Con)' then
		return true
	end

	return false
end

function notateInfo(color1In, actionIn, color2In, resultIn, updateLaterIn)
	local lineSave = noteTakerCurrLine
	noteTakerCurrLine = #noteTakerNotes
	if not noteTakerBlankLine(noteTakerCurrLine) then
		addNewLine()
		noteTakerCurrLine = #noteTakerNotes
	end
	noteTakerNotes[noteTakerCurrLine].color1 = color1In
	noteTakerNotes[noteTakerCurrLine].action = actionIn
	noteTakerNotes[noteTakerCurrLine].color2 = color2In
	noteTakerNotes[noteTakerCurrLine].result = resultIn
	if updateLaterIn then
		notate.line = noteTakerCurrLine
		notate.action = actionIn
	end
	noteTakerCurrLine = lineSave
	refreshNotes(nil)
end

function noteTakerBlankLine(currLineIn)
	if noteTakerNotes[noteTakerCurrLine].conflict == ''
		and noteTakerNotes[noteTakerCurrLine].color1 == ''
		and noteTakerNotes[noteTakerCurrLine].action == ''
		and noteTakerNotes[noteTakerCurrLine].color2 == ''
		and noteTakerNotes[noteTakerCurrLine].claim3 == ''
		and noteTakerNotes[noteTakerCurrLine].claim2 == ''
		and noteTakerNotes[noteTakerCurrLine].claim1 == ''
		and noteTakerNotes[noteTakerCurrLine].result == '' then
			return true
	end

	return false
end

function noteTakerSetNotes(stringIn)
	local options = Global.getTable('options')
	if options.scriptedVoting then
		Global.setVar('mainNotes', stringIn)
		setNotes(Global.getVar('voteNotes') .. '\n\n' .. stringIn)
	else
		setNotes(stringIn)
	end
end

function newNoteTakerLuaScript(playerNoteTakerIn, useColorIn, cooperativeIn, colorMatchIn, useNamesIn, swapLFIn, moveTrackerIn)
	local mainScript = Global.getLuaScript()
	local cutHerePos = string.find(mainScript, '--CUT HERE')

	return 'useColor = ' .. useColorIn .. '\r\n' ..
	'cooperative = ' .. cooperativeIn .. '\r\n' ..
	'colorMatch = ' .. colorMatchIn .. '\r\n' ..
	'useNames = ' .. useNamesIn .. '\r\n' ..
	'playerNoteTaker = \'' .. playerNoteTakerIn .. '\'\r\n' ..
	'privateFogGUID = nil\r\n' ..
	'privateScreenGUID = nil\r\n' ..
	'swapLF = ' .. swapLFIn .. '\r\n' ..
	'moveTracker = ' .. moveTrackerIn .. '\r\n' ..
	'prevPresColor = nil\r\n' ..
	'prevChanColor = nil\r\n' ..
	'nextPost = nil\r\n' ..
	'forceMenu = nil\r\n' ..
	'lastGUID = nil\r\n' ..
	'\r\n' ..
	'function onLoad(saveString)\r\n' ..
	'	noteTakerOnLoad(saveString)\r\n' ..
	'end\r\n' ..
	'\r\n' ..
	'function onSave()\r\n' ..
	'	return notetakerOnSave()\r\n' ..
	'end\r\n' ..
	'\r\n' ..
	'function onDestroy()\r\n' ..
	'	notetakerOnDestroy()\r\n' ..
	'end\r\n' ..
	string.sub(mainScript, cutHerePos, string.len(mainScript))
end

function respawnNoteTakerLuaScript()
	local mainScript = self.getLuaScript()
	local cutHerePos = string.find(mainScript, '--CUT HERE')

	return 'useColor = ' .. tostring(useColor) .. '\r\n' ..
	'cooperative = ' .. tostring(cooperative) .. '\r\n' ..
	'colorMatch = ' .. tostring(colorMatch) .. '\r\n' ..
	'useNames = ' .. tostring(useNames) .. '\r\n' ..
	'playerNoteTaker = ' .. easyQuotes(playerNoteTaker) .. '\r\n' ..
	'privateFogGUID = ' .. easyQuotes(privateFogGUID) .. '\r\n' ..
	'privateScreenGUID = ' .. easyQuotes(privateScreenGUID) .. '\r\n' ..
	'swapLF = ' .. tostring(swapLF) .. '\r\n' ..
	'moveTracker = ' .. tostring(moveTracker) .. '\r\n' ..
	'prevPresColor = ' .. easyQuotes(prevPresColor) .. '\r\n' ..
	'prevChanColor = ' .. easyQuotes(prevChanColor) .. '\r\n' ..
	'nextPost = ' .. tostring(nextPost) .. '\r\n' ..
	'forceMenu = ' ..  tostring(forceMenu) .. '\r\n' ..
	'lastGUID = ' .. easyQuotes(self.getGUID()) .. '\r\n' ..
	'\r\n' ..
	'function onLoad(saveString)\r\n' ..
	'	noteTakerOnLoad(saveString)\r\n' ..
	'end\r\n' ..
	'\r\n' ..
	'function onSave()\r\n' ..
	'	return notetakerOnSave()\r\n' ..
	'end\r\n' ..
	'\r\n' ..
	'function onDestroy()\r\n' ..
	'	notetakerOnDestroy()\r\n' ..
	'end\r\n' ..
	string.sub(mainScript, cutHerePos, string.len(mainScript))
end

function easyQuotes(stringIn)
	if stringIn then
		return string.char(39) .. stringIn .. string.char(39)
	else
		return 'nil'
	end
end

-- Common Globals and Functions
main_playable_colors = {'White', 'Brown', 'Red', 'Orange', 'Yellow', 'Green', 'Teal', 'Blue', 'Purple', 'Pink'}
extra_playable_colors = {'Tan', 'Olive'}
extra_playable_colors_rgb = {Tan = {210/255, 180/255, 140/255}, Olive = {128/255, 128/255, 0/255}}
hidden_zone_guids = {White = 'f13d0b', Brown = '90049b', Red = '134297', Orange = '344002', Yellow = '9b5558', Green = '7a8301', Teal = '568a75', Blue = 'dbd95e', Purple = 'cc1b94', Pink = 'd954ee'}
president_guid = '4d3d8f'
prev_president_guid = '780217'
prev_president_pos = {x = -8.0, y = 1.06, z = 14.0}
chancelor_guid = '7dba7e'
prev_chancelor_guid = '448483'
prev_chancelor_pos = {x = 8.0, y = 1.06, z = 14.0}
election_tracker_guid = 'dd57c4'

-- rotations
no_rotation = {x = 0, y = 0, z = 0}
flip_y = {x = 0, y = 180, z = 0}
flip_y_z = {x = 0, y = 180, z = 180}

function giveObjectToPlayer(object, playerColor, posAdd, rotAdd, ...)
	local ph = Player[playerColor].getPlayerHand()

	if ph then
		if rotAdd['exactRot'] then
			object.setRotationSmooth({rotAdd['x'], rotAdd['y'], rotAdd['z']}, ...)
		else
			object.setRotationSmooth({ph['rot_x'] + rotAdd['x'], ph['rot_y'] + rotAdd['y'], ph['rot_z'] + rotAdd['z']}, ...)
		end
		if posAdd['forceHeight'] then
			object.setPositionSmooth({ph['pos_x'] + ph['trigger_forward_x'] * posAdd['forward'] + ph['trigger_right_x'] * posAdd['right'] + ph['trigger_up_x'] * posAdd['up'],
											  posAdd['forceHeight'],
											  ph['pos_z'] + ph['trigger_forward_z'] * posAdd['forward'] + ph['trigger_right_z'] * posAdd['right'] + ph['trigger_up_z'] * posAdd['up']}, ...)
		else
			object.setPositionSmooth({ph['pos_x'] + ph['trigger_forward_x'] * posAdd['forward'] + ph['trigger_right_x'] * posAdd['right'] + ph['trigger_up_x'] * posAdd['up'],
											  ph['pos_y'] + ph['trigger_forward_y'] * posAdd['forward'] + ph['trigger_right_y'] * posAdd['right'] + ph['trigger_up_y'] * posAdd['up'],
											  ph['pos_z'] + ph['trigger_forward_z'] * posAdd['forward'] + ph['trigger_right_z'] * posAdd['right'] + ph['trigger_up_z'] * posAdd['up']}, ...)
		end
	end
end

function forceObjectToPlayer(object, playerColor, posAdd, rotAdd)
	local ph = Player[playerColor].getPlayerHand();

	if ph then
		if rotAdd['exactRot'] then
			object.setRotation({rotAdd['x'], rotAdd['y'], rotAdd['z']})
		else
			object.setRotation({ph['rot_x'] + rotAdd['x'], ph['rot_y'] + rotAdd['y'], ph['rot_z'] + rotAdd['z']})
		end
		if posAdd['forceHeight'] then
			object.setPosition({ph['pos_x'] + ph['trigger_forward_x'] * posAdd['forward'] + ph['trigger_right_x'] * posAdd['right'] + ph['trigger_up_x'] * posAdd['up'],
									  posAdd['forceHeight'],
									  ph['pos_z'] + ph['trigger_forward_z'] * posAdd['forward'] + ph['trigger_right_z'] * posAdd['right'] + ph['trigger_up_z'] * posAdd['up']})
		else
			object.setPosition({ph['pos_x'] + ph['trigger_forward_x'] * posAdd['forward'] + ph['trigger_right_x'] * posAdd['right'] + ph['trigger_up_x'] * posAdd['up'],
									  ph['pos_y'] + ph['trigger_forward_y'] * posAdd['forward'] + ph['trigger_right_y'] * posAdd['right'] + ph['trigger_up_y'] * posAdd['up'],
									  ph['pos_z'] + ph['trigger_forward_z'] * posAdd['forward'] + ph['trigger_right_z'] * posAdd['right'] + ph['trigger_up_z'] * posAdd['up']})
		end
	end
end

function findDistance(posA, posB)
	return math.sqrt((posA['x'] - posB['x'])^2 +
						  (posA['y'] - posB['y'])^2 +
						  (posA['z'] - posB['z'])^2)
end

function closestPlayer(objectIn, playerListIn, maxIn)
	local playerColorOut = nil

	local lastDistance = maxIn
	if objectIn then
		local tempPos = objectIn.getPosition()
		for i, playerColor in ipairs(playerListIn) do
			local ph = Player[playerColor].getPlayerHand()
			if ph then
				local pos = {x = ph['pos_x'], y = ph['pos_y'], z = ph['pos_z']}
				local distance = findDistance(tempPos, pos);
				if distance < lastDistance then
					lastDistance = distance
					playerColorOut = playerColor
				end
			end
		end
	end

	return playerColorOut
end

function sleep(numSeconds)
	local t0 = os.clock()
	while os.clock() - t0 <= numSeconds do coroutine.yield(0) end
end

function wait(numFrames)
	for i=1,numFrames,1 do coroutine.yield(0) end
end

function destroyObjectByGUID(guidIn)
	local dObject = getObjectFromGUID(guidIn)
	if dObject then destroyObject(dObject) end
end

function rgbToHex(c)
	return string.format('%02x%02x%02x', c['r'] * 255 , c['g'] * 255, c['b'] * 255)
end

function stringColorToHex(color)
	return rgbToHex(stringColorToRGB(color))
end

function removeBBCode(stringIn)
	local out = ''
	local formating = false

	for i = 1, string.len(stringIn) do
		local tmpChar = string.sub(stringIn, i, i)
		if tmpChar == '[' then
			formating = true
		elseif tmpChar == ']' then
			formating = false
		else
			if not formating then out = out .. tmpChar end
		end
	end

	return out
end

function nullFunction()
	--nothing here
end

function tableToString(tbl, indent)
	if not indent then indent = 0 end
	local out = ''

	for k, v in pairs(tbl) do
   	formatting = string.rep('  ', indent) .. k .. ': '
   	if type(v) == 'table' then
      	out = out .. formatting .. '\n' .. tableToString(v, indent + 1)
   	elseif type(v) == 'boolean' then
      	out = out .. formatting .. tostring(v) .. '\n'
   	else
			out = out .. formatting .. v .. '\n'
    end
  end

  return out
end
-- end Common Globals and Functions
